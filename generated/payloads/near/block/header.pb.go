// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: payloads/near/block/header.proto

package pb_block

import (
	common "github.com/aurora-is-near/borealis-prototypes-go/generated/payloads/near/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockHeaderView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author string                  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Header *IndexerBlockHeaderView `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *BlockHeaderView) Reset() {
	*x = BlockHeaderView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderView) ProtoMessage() {}

func (x *BlockHeaderView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderView.ProtoReflect.Descriptor instead.
func (*BlockHeaderView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_header_proto_rawDescGZIP(), []int{0}
}

func (x *BlockHeaderView) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BlockHeaderView) GetHeader() *IndexerBlockHeaderView {
	if x != nil {
		return x.Header
	}
	return nil
}

type IndexerBlockHeaderView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                uint64                      `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	PrevHeight            *uint64                     `protobuf:"varint,2,opt,name=prev_height,json=prevHeight,proto3,oneof" json:"prev_height,omitempty"`
	H256EpochId           []byte                      `protobuf:"bytes,3,opt,name=h256_epoch_id,json=h256EpochId,proto3" json:"h256_epoch_id,omitempty"`
	H256NextEpochId       []byte                      `protobuf:"bytes,4,opt,name=h256_next_epoch_id,json=h256NextEpochId,proto3" json:"h256_next_epoch_id,omitempty"`
	H256Hash              []byte                      `protobuf:"bytes,5,opt,name=h256_hash,json=h256Hash,proto3" json:"h256_hash,omitempty"`
	H256PrevHash          []byte                      `protobuf:"bytes,6,opt,name=h256_prev_hash,json=h256PrevHash,proto3" json:"h256_prev_hash,omitempty"`
	H256PrevStateRoot     []byte                      `protobuf:"bytes,7,opt,name=h256_prev_state_root,json=h256PrevStateRoot,proto3" json:"h256_prev_state_root,omitempty"`
	H256ChunkReceiptsRoot []byte                      `protobuf:"bytes,8,opt,name=h256_chunk_receipts_root,json=h256ChunkReceiptsRoot,proto3" json:"h256_chunk_receipts_root,omitempty"`
	H256ChunkHeadersRoot  []byte                      `protobuf:"bytes,9,opt,name=h256_chunk_headers_root,json=h256ChunkHeadersRoot,proto3" json:"h256_chunk_headers_root,omitempty"`
	H256ChunkTxRoot       []byte                      `protobuf:"bytes,10,opt,name=h256_chunk_tx_root,json=h256ChunkTxRoot,proto3" json:"h256_chunk_tx_root,omitempty"`
	H256OutcomeRoot       []byte                      `protobuf:"bytes,11,opt,name=h256_outcome_root,json=h256OutcomeRoot,proto3" json:"h256_outcome_root,omitempty"`
	ChunksIncluded        uint64                      `protobuf:"varint,12,opt,name=chunks_included,json=chunksIncluded,proto3" json:"chunks_included,omitempty"`
	H256ChallengesRoot    []byte                      `protobuf:"bytes,13,opt,name=h256_challenges_root,json=h256ChallengesRoot,proto3" json:"h256_challenges_root,omitempty"`
	Timestamp             uint64                      `protobuf:"varint,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampNanosec      uint64                      `protobuf:"varint,15,opt,name=timestamp_nanosec,json=timestampNanosec,proto3" json:"timestamp_nanosec,omitempty"`
	H256RandomValue       []byte                      `protobuf:"bytes,16,opt,name=h256_random_value,json=h256RandomValue,proto3" json:"h256_random_value,omitempty"`
	ValidatorProposals    []*ValidatorStakeView       `protobuf:"bytes,17,rep,name=validator_proposals,json=validatorProposals,proto3" json:"validator_proposals,omitempty"`
	ChunkMask             []bool                      `protobuf:"varint,18,rep,packed,name=chunk_mask,json=chunkMask,proto3" json:"chunk_mask,omitempty"`
	U128GasPrice          []byte                      `protobuf:"bytes,19,opt,name=u128_gas_price,json=u128GasPrice,proto3" json:"u128_gas_price,omitempty"`
	BlockOrdinal          *uint64                     `protobuf:"varint,20,opt,name=block_ordinal,json=blockOrdinal,proto3,oneof" json:"block_ordinal,omitempty"`
	U128TotalSupply       []byte                      `protobuf:"bytes,21,opt,name=u128_total_supply,json=u128TotalSupply,proto3" json:"u128_total_supply,omitempty"`
	ChallengesResult      []*SlashedValidator         `protobuf:"bytes,22,rep,name=challenges_result,json=challengesResult,proto3" json:"challenges_result,omitempty"`
	H256LastFinalBlock    []byte                      `protobuf:"bytes,23,opt,name=h256_last_final_block,json=h256LastFinalBlock,proto3" json:"h256_last_final_block,omitempty"`
	H256LastDsFinalBlock  []byte                      `protobuf:"bytes,24,opt,name=h256_last_ds_final_block,json=h256LastDsFinalBlock,proto3" json:"h256_last_ds_final_block,omitempty"`
	H256NextBpHash        []byte                      `protobuf:"bytes,25,opt,name=h256_next_bp_hash,json=h256NextBpHash,proto3" json:"h256_next_bp_hash,omitempty"`
	H256BlockMerkleRoot   []byte                      `protobuf:"bytes,26,opt,name=h256_block_merkle_root,json=h256BlockMerkleRoot,proto3" json:"h256_block_merkle_root,omitempty"`
	H256EpochSyncDataHash []byte                      `protobuf:"bytes,27,opt,name=h256_epoch_sync_data_hash,json=h256EpochSyncDataHash,proto3,oneof" json:"h256_epoch_sync_data_hash,omitempty"`
	Approvals             []*common.OptionalSignature `protobuf:"bytes,28,rep,name=approvals,proto3" json:"approvals,omitempty"`
	Signature             *common.Signature           `protobuf:"bytes,29,opt,name=signature,proto3" json:"signature,omitempty"`
	LatestProtocolVersion uint32                      `protobuf:"varint,30,opt,name=latest_protocol_version,json=latestProtocolVersion,proto3" json:"latest_protocol_version,omitempty"`
}

func (x *IndexerBlockHeaderView) Reset() {
	*x = IndexerBlockHeaderView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_header_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerBlockHeaderView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerBlockHeaderView) ProtoMessage() {}

func (x *IndexerBlockHeaderView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_header_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerBlockHeaderView.ProtoReflect.Descriptor instead.
func (*IndexerBlockHeaderView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_header_proto_rawDescGZIP(), []int{1}
}

func (x *IndexerBlockHeaderView) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetPrevHeight() uint64 {
	if x != nil && x.PrevHeight != nil {
		return *x.PrevHeight
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetH256EpochId() []byte {
	if x != nil {
		return x.H256EpochId
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256NextEpochId() []byte {
	if x != nil {
		return x.H256NextEpochId
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256Hash() []byte {
	if x != nil {
		return x.H256Hash
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256PrevHash() []byte {
	if x != nil {
		return x.H256PrevHash
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256PrevStateRoot() []byte {
	if x != nil {
		return x.H256PrevStateRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256ChunkReceiptsRoot() []byte {
	if x != nil {
		return x.H256ChunkReceiptsRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256ChunkHeadersRoot() []byte {
	if x != nil {
		return x.H256ChunkHeadersRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256ChunkTxRoot() []byte {
	if x != nil {
		return x.H256ChunkTxRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256OutcomeRoot() []byte {
	if x != nil {
		return x.H256OutcomeRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetChunksIncluded() uint64 {
	if x != nil {
		return x.ChunksIncluded
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetH256ChallengesRoot() []byte {
	if x != nil {
		return x.H256ChallengesRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetTimestampNanosec() uint64 {
	if x != nil {
		return x.TimestampNanosec
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetH256RandomValue() []byte {
	if x != nil {
		return x.H256RandomValue
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetValidatorProposals() []*ValidatorStakeView {
	if x != nil {
		return x.ValidatorProposals
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetChunkMask() []bool {
	if x != nil {
		return x.ChunkMask
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetU128GasPrice() []byte {
	if x != nil {
		return x.U128GasPrice
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetBlockOrdinal() uint64 {
	if x != nil && x.BlockOrdinal != nil {
		return *x.BlockOrdinal
	}
	return 0
}

func (x *IndexerBlockHeaderView) GetU128TotalSupply() []byte {
	if x != nil {
		return x.U128TotalSupply
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetChallengesResult() []*SlashedValidator {
	if x != nil {
		return x.ChallengesResult
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256LastFinalBlock() []byte {
	if x != nil {
		return x.H256LastFinalBlock
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256LastDsFinalBlock() []byte {
	if x != nil {
		return x.H256LastDsFinalBlock
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256NextBpHash() []byte {
	if x != nil {
		return x.H256NextBpHash
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256BlockMerkleRoot() []byte {
	if x != nil {
		return x.H256BlockMerkleRoot
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetH256EpochSyncDataHash() []byte {
	if x != nil {
		return x.H256EpochSyncDataHash
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetApprovals() []*common.OptionalSignature {
	if x != nil {
		return x.Approvals
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetSignature() *common.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *IndexerBlockHeaderView) GetLatestProtocolVersion() uint32 {
	if x != nil {
		return x.LatestProtocolVersion
	}
	return 0
}

type SlashedValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IsDoubleSign bool   `protobuf:"varint,2,opt,name=is_double_sign,json=isDoubleSign,proto3" json:"is_double_sign,omitempty"`
}

func (x *SlashedValidator) Reset() {
	*x = SlashedValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_header_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashedValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashedValidator) ProtoMessage() {}

func (x *SlashedValidator) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_header_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashedValidator.ProtoReflect.Descriptor instead.
func (*SlashedValidator) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_header_proto_rawDescGZIP(), []int{2}
}

func (x *SlashedValidator) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SlashedValidator) GetIsDoubleSign() bool {
	if x != nil {
		return x.IsDoubleSign
	}
	return false
}

var File_payloads_near_block_header_proto protoreflect.FileDescriptor

var file_payloads_near_block_header_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x1a, 0x21, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71,
	0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x91, 0x0c, 0x0a, 0x16, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x32,
	0x35, 0x36, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x68, 0x32, 0x35, 0x36, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x12, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x32, 0x35, 0x36,
	0x4e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x32, 0x35, 0x36, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x68, 0x32, 0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x32, 0x35, 0x36,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x68, 0x32, 0x35, 0x36, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f,
	0x0a, 0x14, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x32,
	0x35, 0x36, 0x50, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x68, 0x32, 0x35, 0x36, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x32, 0x35, 0x36,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x68, 0x32, 0x35, 0x36, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x78,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x32, 0x35,
	0x36, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x78, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x32, 0x35, 0x36, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x32, 0x35, 0x36, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x68, 0x32, 0x35, 0x36, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x32, 0x35, 0x36, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x75, 0x31, 0x32, 0x38, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x75, 0x31, 0x32, 0x38, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x32, 0x35,
	0x36, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x68, 0x32, 0x35, 0x36, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x18,
	0x68, 0x32, 0x35, 0x36, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x68, 0x32, 0x35, 0x36, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x62, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x68, 0x32, 0x35, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x33, 0x0a, 0x16, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x68, 0x32, 0x35, 0x36, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x15, 0x68, 0x32, 0x35, 0x36, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x68, 0x32, 0x35, 0x36,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x57, 0x0a, 0x10, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payloads_near_block_header_proto_rawDescOnce sync.Once
	file_payloads_near_block_header_proto_rawDescData = file_payloads_near_block_header_proto_rawDesc
)

func file_payloads_near_block_header_proto_rawDescGZIP() []byte {
	file_payloads_near_block_header_proto_rawDescOnce.Do(func() {
		file_payloads_near_block_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_payloads_near_block_header_proto_rawDescData)
	})
	return file_payloads_near_block_header_proto_rawDescData
}

var file_payloads_near_block_header_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_payloads_near_block_header_proto_goTypes = []any{
	(*BlockHeaderView)(nil),          // 0: borealis.payloads.near.BlockHeaderView
	(*IndexerBlockHeaderView)(nil),   // 1: borealis.payloads.near.IndexerBlockHeaderView
	(*SlashedValidator)(nil),         // 2: borealis.payloads.near.SlashedValidator
	(*ValidatorStakeView)(nil),       // 3: borealis.payloads.near.ValidatorStakeView
	(*common.OptionalSignature)(nil), // 4: borealis.payloads.near.OptionalSignature
	(*common.Signature)(nil),         // 5: borealis.payloads.near.Signature
}
var file_payloads_near_block_header_proto_depIdxs = []int32{
	1, // 0: borealis.payloads.near.BlockHeaderView.header:type_name -> borealis.payloads.near.IndexerBlockHeaderView
	3, // 1: borealis.payloads.near.IndexerBlockHeaderView.validator_proposals:type_name -> borealis.payloads.near.ValidatorStakeView
	2, // 2: borealis.payloads.near.IndexerBlockHeaderView.challenges_result:type_name -> borealis.payloads.near.SlashedValidator
	4, // 3: borealis.payloads.near.IndexerBlockHeaderView.approvals:type_name -> borealis.payloads.near.OptionalSignature
	5, // 4: borealis.payloads.near.IndexerBlockHeaderView.signature:type_name -> borealis.payloads.near.Signature
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_payloads_near_block_header_proto_init() }
func file_payloads_near_block_header_proto_init() {
	if File_payloads_near_block_header_proto != nil {
		return
	}
	file_payloads_near_block_stake_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payloads_near_block_header_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BlockHeaderView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_header_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IndexerBlockHeaderView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_header_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SlashedValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payloads_near_block_header_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payloads_near_block_header_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payloads_near_block_header_proto_goTypes,
		DependencyIndexes: file_payloads_near_block_header_proto_depIdxs,
		MessageInfos:      file_payloads_near_block_header_proto_msgTypes,
	}.Build()
	File_payloads_near_block_header_proto = out.File
	file_payloads_near_block_header_proto_rawDesc = nil
	file_payloads_near_block_header_proto_goTypes = nil
	file_payloads_near_block_header_proto_depIdxs = nil
}
