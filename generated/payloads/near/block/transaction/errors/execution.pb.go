// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: payloads/near/block/transaction/errors/execution.proto

package pb_errors

import (
	common "github.com/aurora-is-near/borealis-prototypes-go/generated/payloads/near/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvalidAccessKeyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*InvalidAccessKeyError_AccessKeyNotFound_
	//	*InvalidAccessKeyError_ReceiverMismatch_
	//	*InvalidAccessKeyError_MethodNameMismatch_
	//	*InvalidAccessKeyError_RequiresFullAccess_
	//	*InvalidAccessKeyError_NotEnoughAllowance_
	//	*InvalidAccessKeyError_DepositWithFunctionCall_
	Variant isInvalidAccessKeyError_Variant `protobuf_oneof:"variant"`
}

func (x *InvalidAccessKeyError) Reset() {
	*x = InvalidAccessKeyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError) ProtoMessage() {}

func (x *InvalidAccessKeyError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0}
}

func (m *InvalidAccessKeyError) GetVariant() isInvalidAccessKeyError_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *InvalidAccessKeyError) GetAccessKeyNotFound() *InvalidAccessKeyError_AccessKeyNotFound {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_AccessKeyNotFound_); ok {
		return x.AccessKeyNotFound
	}
	return nil
}

func (x *InvalidAccessKeyError) GetReceiverMismatch() *InvalidAccessKeyError_ReceiverMismatch {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_ReceiverMismatch_); ok {
		return x.ReceiverMismatch
	}
	return nil
}

func (x *InvalidAccessKeyError) GetMethodNameMismatch() *InvalidAccessKeyError_MethodNameMismatch {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_MethodNameMismatch_); ok {
		return x.MethodNameMismatch
	}
	return nil
}

func (x *InvalidAccessKeyError) GetRequiresFullAccess() *InvalidAccessKeyError_RequiresFullAccess {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_RequiresFullAccess_); ok {
		return x.RequiresFullAccess
	}
	return nil
}

func (x *InvalidAccessKeyError) GetNotEnoughAllowance() *InvalidAccessKeyError_NotEnoughAllowance {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_NotEnoughAllowance_); ok {
		return x.NotEnoughAllowance
	}
	return nil
}

func (x *InvalidAccessKeyError) GetDepositWithFunctionCall() *InvalidAccessKeyError_DepositWithFunctionCall {
	if x, ok := x.GetVariant().(*InvalidAccessKeyError_DepositWithFunctionCall_); ok {
		return x.DepositWithFunctionCall
	}
	return nil
}

type isInvalidAccessKeyError_Variant interface {
	isInvalidAccessKeyError_Variant()
}

type InvalidAccessKeyError_AccessKeyNotFound_ struct {
	AccessKeyNotFound *InvalidAccessKeyError_AccessKeyNotFound `protobuf:"bytes,1,opt,name=access_key_not_found,json=accessKeyNotFound,proto3,oneof"`
}

type InvalidAccessKeyError_ReceiverMismatch_ struct {
	ReceiverMismatch *InvalidAccessKeyError_ReceiverMismatch `protobuf:"bytes,2,opt,name=receiver_mismatch,json=receiverMismatch,proto3,oneof"`
}

type InvalidAccessKeyError_MethodNameMismatch_ struct {
	MethodNameMismatch *InvalidAccessKeyError_MethodNameMismatch `protobuf:"bytes,3,opt,name=method_name_mismatch,json=methodNameMismatch,proto3,oneof"`
}

type InvalidAccessKeyError_RequiresFullAccess_ struct {
	RequiresFullAccess *InvalidAccessKeyError_RequiresFullAccess `protobuf:"bytes,4,opt,name=requires_full_access,json=requiresFullAccess,proto3,oneof"`
}

type InvalidAccessKeyError_NotEnoughAllowance_ struct {
	NotEnoughAllowance *InvalidAccessKeyError_NotEnoughAllowance `protobuf:"bytes,5,opt,name=not_enough_allowance,json=notEnoughAllowance,proto3,oneof"`
}

type InvalidAccessKeyError_DepositWithFunctionCall_ struct {
	DepositWithFunctionCall *InvalidAccessKeyError_DepositWithFunctionCall `protobuf:"bytes,6,opt,name=deposit_with_function_call,json=depositWithFunctionCall,proto3,oneof"`
}

func (*InvalidAccessKeyError_AccessKeyNotFound_) isInvalidAccessKeyError_Variant() {}

func (*InvalidAccessKeyError_ReceiverMismatch_) isInvalidAccessKeyError_Variant() {}

func (*InvalidAccessKeyError_MethodNameMismatch_) isInvalidAccessKeyError_Variant() {}

func (*InvalidAccessKeyError_RequiresFullAccess_) isInvalidAccessKeyError_Variant() {}

func (*InvalidAccessKeyError_NotEnoughAllowance_) isInvalidAccessKeyError_Variant() {}

func (*InvalidAccessKeyError_DepositWithFunctionCall_) isInvalidAccessKeyError_Variant() {}

type TxExecutionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*TxExecutionError_ActionError_
	//	*TxExecutionError_InvalidTxError_
	Variant isTxExecutionError_Variant `protobuf_oneof:"variant"`
}

func (x *TxExecutionError) Reset() {
	*x = TxExecutionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError) ProtoMessage() {}

func (x *TxExecutionError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError.ProtoReflect.Descriptor instead.
func (*TxExecutionError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1}
}

func (m *TxExecutionError) GetVariant() isTxExecutionError_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *TxExecutionError) GetActionError() *TxExecutionError_ActionError {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_); ok {
		return x.ActionError
	}
	return nil
}

func (x *TxExecutionError) GetInvalidTxError() *TxExecutionError_InvalidTxError {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_); ok {
		return x.InvalidTxError
	}
	return nil
}

type isTxExecutionError_Variant interface {
	isTxExecutionError_Variant()
}

type TxExecutionError_ActionError_ struct {
	ActionError *TxExecutionError_ActionError `protobuf:"bytes,1,opt,name=action_error,json=actionError,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ struct {
	InvalidTxError *TxExecutionError_InvalidTxError `protobuf:"bytes,2,opt,name=invalid_tx_error,json=invalidTxError,proto3,oneof"`
}

func (*TxExecutionError_ActionError_) isTxExecutionError_Variant() {}

func (*TxExecutionError_InvalidTxError_) isTxExecutionError_Variant() {}

type InvalidAccessKeyError_AccessKeyNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *common.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *InvalidAccessKeyError_AccessKeyNotFound) Reset() {
	*x = InvalidAccessKeyError_AccessKeyNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_AccessKeyNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_AccessKeyNotFound) ProtoMessage() {}

func (x *InvalidAccessKeyError_AccessKeyNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_AccessKeyNotFound.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_AccessKeyNotFound) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 0}
}

func (x *InvalidAccessKeyError_AccessKeyNotFound) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InvalidAccessKeyError_AccessKeyNotFound) GetPublicKey() *common.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type InvalidAccessKeyError_ReceiverMismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxReceiver string `protobuf:"bytes,1,opt,name=tx_receiver,json=txReceiver,proto3" json:"tx_receiver,omitempty"`
	AkReceiver string `protobuf:"bytes,2,opt,name=ak_receiver,json=akReceiver,proto3" json:"ak_receiver,omitempty"`
}

func (x *InvalidAccessKeyError_ReceiverMismatch) Reset() {
	*x = InvalidAccessKeyError_ReceiverMismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_ReceiverMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_ReceiverMismatch) ProtoMessage() {}

func (x *InvalidAccessKeyError_ReceiverMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_ReceiverMismatch.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_ReceiverMismatch) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 1}
}

func (x *InvalidAccessKeyError_ReceiverMismatch) GetTxReceiver() string {
	if x != nil {
		return x.TxReceiver
	}
	return ""
}

func (x *InvalidAccessKeyError_ReceiverMismatch) GetAkReceiver() string {
	if x != nil {
		return x.AkReceiver
	}
	return ""
}

type InvalidAccessKeyError_MethodNameMismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
}

func (x *InvalidAccessKeyError_MethodNameMismatch) Reset() {
	*x = InvalidAccessKeyError_MethodNameMismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_MethodNameMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_MethodNameMismatch) ProtoMessage() {}

func (x *InvalidAccessKeyError_MethodNameMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_MethodNameMismatch.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_MethodNameMismatch) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 2}
}

func (x *InvalidAccessKeyError_MethodNameMismatch) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

type InvalidAccessKeyError_RequiresFullAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidAccessKeyError_RequiresFullAccess) Reset() {
	*x = InvalidAccessKeyError_RequiresFullAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_RequiresFullAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_RequiresFullAccess) ProtoMessage() {}

func (x *InvalidAccessKeyError_RequiresFullAccess) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_RequiresFullAccess.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_RequiresFullAccess) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 3}
}

type InvalidAccessKeyError_NotEnoughAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey     *common.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	U128Allowance []byte            `protobuf:"bytes,3,opt,name=u128_allowance,json=u128Allowance,proto3" json:"u128_allowance,omitempty"`
	U128Cost      []byte            `protobuf:"bytes,4,opt,name=u128_cost,json=u128Cost,proto3" json:"u128_cost,omitempty"`
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) Reset() {
	*x = InvalidAccessKeyError_NotEnoughAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_NotEnoughAllowance) ProtoMessage() {}

func (x *InvalidAccessKeyError_NotEnoughAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_NotEnoughAllowance.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_NotEnoughAllowance) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 4}
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) GetPublicKey() *common.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) GetU128Allowance() []byte {
	if x != nil {
		return x.U128Allowance
	}
	return nil
}

func (x *InvalidAccessKeyError_NotEnoughAllowance) GetU128Cost() []byte {
	if x != nil {
		return x.U128Cost
	}
	return nil
}

type InvalidAccessKeyError_DepositWithFunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidAccessKeyError_DepositWithFunctionCall) Reset() {
	*x = InvalidAccessKeyError_DepositWithFunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidAccessKeyError_DepositWithFunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidAccessKeyError_DepositWithFunctionCall) ProtoMessage() {}

func (x *InvalidAccessKeyError_DepositWithFunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidAccessKeyError_DepositWithFunctionCall.ProtoReflect.Descriptor instead.
func (*InvalidAccessKeyError_DepositWithFunctionCall) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{0, 5}
}

type TxExecutionError_ActionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *uint64                                       `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	Kind  *TxExecutionError_ActionError_ActionErrorKind `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *TxExecutionError_ActionError) Reset() {
	*x = TxExecutionError_ActionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError) ProtoMessage() {}

func (x *TxExecutionError_ActionError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TxExecutionError_ActionError) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TxExecutionError_ActionError) GetKind() *TxExecutionError_ActionError_ActionErrorKind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type TxExecutionError_InvalidTxError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*TxExecutionError_InvalidTxError_InvalidAccessKeyError
	//	*TxExecutionError_InvalidTxError_InvalidSignerId_
	//	*TxExecutionError_InvalidTxError_SignerDoesNotExist_
	//	*TxExecutionError_InvalidTxError_InvalidNonce_
	//	*TxExecutionError_InvalidTxError_NonceTooLarge_
	//	*TxExecutionError_InvalidTxError_InvalidReceiverId_
	//	*TxExecutionError_InvalidTxError_InvalidSignature_
	//	*TxExecutionError_InvalidTxError_NotEnoughBalance_
	//	*TxExecutionError_InvalidTxError_LackBalanceForState_
	//	*TxExecutionError_InvalidTxError_CostOverflow_
	//	*TxExecutionError_InvalidTxError_InvalidChain_
	//	*TxExecutionError_InvalidTxError_Expired_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_
	//	*TxExecutionError_InvalidTxError_TransactionSizeExceeded_
	Variant isTxExecutionError_InvalidTxError_Variant `protobuf_oneof:"variant"`
}

func (x *TxExecutionError_InvalidTxError) Reset() {
	*x = TxExecutionError_InvalidTxError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1}
}

func (m *TxExecutionError_InvalidTxError) GetVariant() isTxExecutionError_InvalidTxError_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidAccessKeyError() *InvalidAccessKeyError {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidAccessKeyError); ok {
		return x.InvalidAccessKeyError
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidSignerId() *TxExecutionError_InvalidTxError_InvalidSignerId {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidSignerId_); ok {
		return x.InvalidSignerId
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetSignerDoesNotExist() *TxExecutionError_InvalidTxError_SignerDoesNotExist {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_SignerDoesNotExist_); ok {
		return x.SignerDoesNotExist
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidNonce() *TxExecutionError_InvalidTxError_InvalidNonce {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidNonce_); ok {
		return x.InvalidNonce
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetNonceTooLarge() *TxExecutionError_InvalidTxError_NonceTooLarge {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_NonceTooLarge_); ok {
		return x.NonceTooLarge
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidReceiverId() *TxExecutionError_InvalidTxError_InvalidReceiverId {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidReceiverId_); ok {
		return x.InvalidReceiverId
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidSignature() *TxExecutionError_InvalidTxError_InvalidSignature {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidSignature_); ok {
		return x.InvalidSignature
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetNotEnoughBalance() *TxExecutionError_InvalidTxError_NotEnoughBalance {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_NotEnoughBalance_); ok {
		return x.NotEnoughBalance
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetLackBalanceForState() *TxExecutionError_InvalidTxError_LackBalanceForState {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_LackBalanceForState_); ok {
		return x.LackBalanceForState
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetCostOverflow() *TxExecutionError_InvalidTxError_CostOverflow {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_CostOverflow_); ok {
		return x.CostOverflow
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetInvalidChain() *TxExecutionError_InvalidTxError_InvalidChain {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_InvalidChain_); ok {
		return x.InvalidChain
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetExpired() *TxExecutionError_InvalidTxError_Expired {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_Expired_); ok {
		return x.Expired
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetActionsValidation() *TxExecutionError_InvalidTxError_ActionsValidation {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_); ok {
		return x.ActionsValidation
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError) GetTransactionSizeExceeded() *TxExecutionError_InvalidTxError_TransactionSizeExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_TransactionSizeExceeded_); ok {
		return x.TransactionSizeExceeded
	}
	return nil
}

type isTxExecutionError_InvalidTxError_Variant interface {
	isTxExecutionError_InvalidTxError_Variant()
}

type TxExecutionError_InvalidTxError_InvalidAccessKeyError struct {
	InvalidAccessKeyError *InvalidAccessKeyError `protobuf:"bytes,1,opt,name=invalid_access_key_error,json=invalidAccessKeyError,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_InvalidSignerId_ struct {
	InvalidSignerId *TxExecutionError_InvalidTxError_InvalidSignerId `protobuf:"bytes,2,opt,name=invalid_signer_id,json=invalidSignerId,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_SignerDoesNotExist_ struct {
	SignerDoesNotExist *TxExecutionError_InvalidTxError_SignerDoesNotExist `protobuf:"bytes,3,opt,name=signer_does_not_exist,json=signerDoesNotExist,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_InvalidNonce_ struct {
	InvalidNonce *TxExecutionError_InvalidTxError_InvalidNonce `protobuf:"bytes,4,opt,name=invalid_nonce,json=invalidNonce,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_NonceTooLarge_ struct {
	NonceTooLarge *TxExecutionError_InvalidTxError_NonceTooLarge `protobuf:"bytes,5,opt,name=nonce_too_large,json=nonceTooLarge,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_InvalidReceiverId_ struct {
	InvalidReceiverId *TxExecutionError_InvalidTxError_InvalidReceiverId `protobuf:"bytes,6,opt,name=invalid_receiver_id,json=invalidReceiverId,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_InvalidSignature_ struct {
	InvalidSignature *TxExecutionError_InvalidTxError_InvalidSignature `protobuf:"bytes,7,opt,name=invalid_signature,json=invalidSignature,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_NotEnoughBalance_ struct {
	NotEnoughBalance *TxExecutionError_InvalidTxError_NotEnoughBalance `protobuf:"bytes,8,opt,name=not_enough_balance,json=notEnoughBalance,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_LackBalanceForState_ struct {
	LackBalanceForState *TxExecutionError_InvalidTxError_LackBalanceForState `protobuf:"bytes,9,opt,name=lack_balance_for_state,json=lackBalanceForState,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_CostOverflow_ struct {
	CostOverflow *TxExecutionError_InvalidTxError_CostOverflow `protobuf:"bytes,10,opt,name=cost_overflow,json=costOverflow,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_InvalidChain_ struct {
	InvalidChain *TxExecutionError_InvalidTxError_InvalidChain `protobuf:"bytes,11,opt,name=invalid_chain,json=invalidChain,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_Expired_ struct {
	Expired *TxExecutionError_InvalidTxError_Expired `protobuf:"bytes,12,opt,name=expired,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_ struct {
	ActionsValidation *TxExecutionError_InvalidTxError_ActionsValidation `protobuf:"bytes,13,opt,name=actions_validation,json=actionsValidation,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_TransactionSizeExceeded_ struct {
	TransactionSizeExceeded *TxExecutionError_InvalidTxError_TransactionSizeExceeded `protobuf:"bytes,14,opt,name=transaction_size_exceeded,json=transactionSizeExceeded,proto3,oneof"`
}

func (*TxExecutionError_InvalidTxError_InvalidAccessKeyError) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_InvalidSignerId_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_SignerDoesNotExist_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_InvalidNonce_) isTxExecutionError_InvalidTxError_Variant() {}

func (*TxExecutionError_InvalidTxError_NonceTooLarge_) isTxExecutionError_InvalidTxError_Variant() {}

func (*TxExecutionError_InvalidTxError_InvalidReceiverId_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_InvalidSignature_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_NotEnoughBalance_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_LackBalanceForState_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_CostOverflow_) isTxExecutionError_InvalidTxError_Variant() {}

func (*TxExecutionError_InvalidTxError_InvalidChain_) isTxExecutionError_InvalidTxError_Variant() {}

func (*TxExecutionError_InvalidTxError_Expired_) isTxExecutionError_InvalidTxError_Variant() {}

func (*TxExecutionError_InvalidTxError_ActionsValidation_) isTxExecutionError_InvalidTxError_Variant() {
}

func (*TxExecutionError_InvalidTxError_TransactionSizeExceeded_) isTxExecutionError_InvalidTxError_Variant() {
}

type TxExecutionError_ActionError_ActionErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists_
	//	*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist_
	//	*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar_
	//	*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed_
	//	*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission_
	//	*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist_
	//	*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists_
	//	*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking_
	//	*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState_
	//	*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake_
	//	*TxExecutionError_ActionError_ActionErrorKind_TriesToStake_
	//	*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake_
	//	*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError_
	//	*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError_
	//	*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed_
	//	*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce_
	//	*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge_
	//	*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount_
	Variant isTxExecutionError_ActionError_ActionErrorKind_Variant `protobuf_oneof:"variant"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (m *TxExecutionError_ActionError_ActionErrorKind) GetVariant() isTxExecutionError_ActionError_ActionErrorKind_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetAccountAlreadyExists() *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists_); ok {
		return x.AccountAlreadyExists
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetAccountDoesNotExist() *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist_); ok {
		return x.AccountDoesNotExist
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetCreateAccountOnlyByRegistrar() *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar_); ok {
		return x.CreateAccountOnlyByRegistrar
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetCreateAccountNotAllowed() *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed_); ok {
		return x.CreateAccountNotAllowed
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetActorNoPermission() *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission_); ok {
		return x.ActorNoPermission
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDeleteKeyDoesNotExist() *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist_); ok {
		return x.DeleteKeyDoesNotExist
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetAddKeyAlreadyExists() *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists_); ok {
		return x.AddKeyAlreadyExists
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDeleteAccountStaking() *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking_); ok {
		return x.DeleteAccountStaking
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetLackBalanceForState() *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState_); ok {
		return x.LackBalanceForState
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetTriesToUnstake() *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake_); ok {
		return x.TriesToUnstake
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetTriesToStake() *TxExecutionError_ActionError_ActionErrorKind_TriesToStake {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_TriesToStake_); ok {
		return x.TriesToStake
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetInsufficientStake() *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake_); ok {
		return x.InsufficientStake
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetFunctionCallError() *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError_); ok {
		return x.FunctionCallError
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetNewReceiptValidationError() *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError_); ok {
		return x.NewReceiptValidationError
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetOnlyImplicitAccountCreationAllowed() *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed_); ok {
		return x.OnlyImplicitAccountCreationAllowed
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDeleteAccountWithLargeState() *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState_); ok {
		return x.DeleteAccountWithLargeState
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionInvalidSignature() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature_); ok {
		return x.DelegateActionInvalidSignature
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionSenderDoesNotMatchTxReceiver() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver_); ok {
		return x.DelegateActionSenderDoesNotMatchTxReceiver
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionExpired() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired_); ok {
		return x.DelegateActionExpired
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionAccessKeyError() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError_); ok {
		return x.DelegateActionAccessKeyError
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionInvalidNonce() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce_); ok {
		return x.DelegateActionInvalidNonce
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetDelegateActionNonceTooLarge() *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge_); ok {
		return x.DelegateActionNonceTooLarge
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind) GetNonRefundableTransferToExistingAccount() *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount {
	if x, ok := x.GetVariant().(*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount_); ok {
		return x.NonRefundableTransferToExistingAccount
	}
	return nil
}

type isTxExecutionError_ActionError_ActionErrorKind_Variant interface {
	isTxExecutionError_ActionError_ActionErrorKind_Variant()
}

type TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists_ struct {
	AccountAlreadyExists *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists `protobuf:"bytes,1,opt,name=account_already_exists,json=accountAlreadyExists,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist_ struct {
	AccountDoesNotExist *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist `protobuf:"bytes,2,opt,name=account_does_not_exist,json=accountDoesNotExist,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar_ struct {
	CreateAccountOnlyByRegistrar *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar `protobuf:"bytes,3,opt,name=create_account_only_by_registrar,json=createAccountOnlyByRegistrar,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed_ struct {
	CreateAccountNotAllowed *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed `protobuf:"bytes,4,opt,name=create_account_not_allowed,json=createAccountNotAllowed,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission_ struct {
	ActorNoPermission *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission `protobuf:"bytes,5,opt,name=actor_no_permission,json=actorNoPermission,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist_ struct {
	DeleteKeyDoesNotExist *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist `protobuf:"bytes,6,opt,name=delete_key_does_not_exist,json=deleteKeyDoesNotExist,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists_ struct {
	AddKeyAlreadyExists *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists `protobuf:"bytes,7,opt,name=add_key_already_exists,json=addKeyAlreadyExists,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking_ struct {
	DeleteAccountStaking *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking `protobuf:"bytes,8,opt,name=delete_account_staking,json=deleteAccountStaking,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState_ struct {
	LackBalanceForState *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState `protobuf:"bytes,9,opt,name=lack_balance_for_state,json=lackBalanceForState,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake_ struct {
	TriesToUnstake *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake `protobuf:"bytes,10,opt,name=tries_to_unstake,json=triesToUnstake,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_TriesToStake_ struct {
	TriesToStake *TxExecutionError_ActionError_ActionErrorKind_TriesToStake `protobuf:"bytes,11,opt,name=tries_to_stake,json=triesToStake,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_InsufficientStake_ struct {
	InsufficientStake *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake `protobuf:"bytes,12,opt,name=insufficient_stake,json=insufficientStake,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_FunctionCallError_ struct {
	FunctionCallError *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError `protobuf:"bytes,13,opt,name=function_call_error,json=functionCallError,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError_ struct {
	NewReceiptValidationError *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError `protobuf:"bytes,14,opt,name=new_receipt_validation_error,json=newReceiptValidationError,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed_ struct {
	OnlyImplicitAccountCreationAllowed *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed `protobuf:"bytes,15,opt,name=only_implicit_account_creation_allowed,json=onlyImplicitAccountCreationAllowed,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState_ struct {
	DeleteAccountWithLargeState *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState `protobuf:"bytes,16,opt,name=delete_account_with_large_state,json=deleteAccountWithLargeState,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature_ struct {
	DelegateActionInvalidSignature *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature `protobuf:"bytes,17,opt,name=delegate_action_invalid_signature,json=delegateActionInvalidSignature,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver_ struct {
	DelegateActionSenderDoesNotMatchTxReceiver *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver `protobuf:"bytes,18,opt,name=delegate_action_sender_does_not_match_tx_receiver,json=delegateActionSenderDoesNotMatchTxReceiver,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired_ struct {
	DelegateActionExpired *TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired `protobuf:"bytes,19,opt,name=delegate_action_expired,json=delegateActionExpired,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError_ struct {
	DelegateActionAccessKeyError *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError `protobuf:"bytes,20,opt,name=delegate_action_access_key_error,json=delegateActionAccessKeyError,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce_ struct {
	DelegateActionInvalidNonce *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce `protobuf:"bytes,21,opt,name=delegate_action_invalid_nonce,json=delegateActionInvalidNonce,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge_ struct {
	DelegateActionNonceTooLarge *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge `protobuf:"bytes,22,opt,name=delegate_action_nonce_too_large,json=delegateActionNonceTooLarge,proto3,oneof"`
}

type TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount_ struct {
	NonRefundableTransferToExistingAccount *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount `protobuf:"bytes,23,opt,name=non_refundable_transfer_to_existing_account,json=nonRefundableTransferToExistingAccount,proto3,oneof"`
}

func (*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_TriesToStake_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

func (*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount_) isTxExecutionError_ActionError_ActionErrorKind_Variant() {
}

// Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage
type TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)
type TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 1}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// A top-level account ID can only be created by registrar.
type TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	RegistrarAccountId string `protobuf:"bytes,2,opt,name=registrar_account_id,json=registrarAccountId,proto3" json:"registrar_account_id,omitempty"`
	PredecessorId      string `protobuf:"bytes,3,opt,name=predecessor_id,json=predecessorId,proto3" json:"predecessor_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 2}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) GetRegistrarAccountId() string {
	if x != nil {
		return x.RegistrarAccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar) GetPredecessorId() string {
	if x != nil {
		return x.PredecessorId
	}
	return ""
}

// A newly created account must be under a namespace of the creator account
type TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PredecessorId string `protobuf:"bytes,2,opt,name=predecessor_id,json=predecessorId,proto3" json:"predecessor_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 3}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed) GetPredecessorId() string {
	if x != nil {
		return x.PredecessorId
	}
	return ""
}

// Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver
// or the first TX action is a `CreateAccount` action
type TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 4}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

// Account tries to remove an access key that doesn't exist
type TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *common.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 5}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist) GetPublicKey() *common.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// The public key is already used for an existing access key
type TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *common.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 6}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists) GetPublicKey() *common.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Account is staking and can not be deleted
type TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 7}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
type TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An account which needs balance
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Balance required to complete an action.
	U128Amount []byte `protobuf:"bytes,2,opt,name=u128_amount,json=u128Amount,proto3" json:"u128_amount,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 8}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState) GetU128Amount() []byte {
	if x != nil {
		return x.U128Amount
	}
	return nil
}

// Account is not yet staked, but tries to unstake
type TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 9}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// The account doesn't have enough balance to increase the stake.
type TxExecutionError_ActionError_ActionErrorKind_TriesToStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	U128Stake   []byte `protobuf:"bytes,2,opt,name=u128_stake,json=u128Stake,proto3" json:"u128_stake,omitempty"`
	U128Locked  []byte `protobuf:"bytes,3,opt,name=u128_locked,json=u128Locked,proto3" json:"u128_locked,omitempty"`
	U128Balance []byte `protobuf:"bytes,4,opt,name=u128_balance,json=u128Balance,proto3" json:"u128_balance,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_TriesToStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_TriesToStake) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_TriesToStake.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_TriesToStake) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 10}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) GetU128Stake() []byte {
	if x != nil {
		return x.U128Stake
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) GetU128Locked() []byte {
	if x != nil {
		return x.U128Locked
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind_TriesToStake) GetU128Balance() []byte {
	if x != nil {
		return x.U128Balance
	}
	return nil
}

type TxExecutionError_ActionError_ActionErrorKind_InsufficientStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	U128Stake        []byte `protobuf:"bytes,2,opt,name=u128_stake,json=u128Stake,proto3" json:"u128_stake,omitempty"`
	U128MinimumStake []byte `protobuf:"bytes,3,opt,name=u128_minimum_stake,json=u128MinimumStake,proto3" json:"u128_minimum_stake,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_InsufficientStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_InsufficientStake.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 11}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) GetU128Stake() []byte {
	if x != nil {
		return x.U128Stake
	}
	return nil
}

func (x *TxExecutionError_ActionError_ActionErrorKind_InsufficientStake) GetU128MinimumStake() []byte {
	if x != nil {
		return x.U128MinimumStake
	}
	return nil
}

// An error occurred during a `FunctionCall` Action, parameter is debug message.
type TxExecutionError_ActionError_ActionErrorKind_FunctionCallError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *FunctionCallErrorSer `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_FunctionCallError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_FunctionCallError.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 12}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_FunctionCallError) GetError() *FunctionCallErrorSer {
	if x != nil {
		return x.Error
	}
	return nil
}

// Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails
// receipt validation.
type TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *ReceiptValidationError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 13}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError) GetError() *ReceiptValidationError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Error occurs when a `CreateAccount` action is called on hex-characters
// account of length 64.  See implicit account creation NEP:
// <https://github.com/nearprotocol/NEPs/pull/71>.
type TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) ProtoMessage() {
}

func (x *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 14}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Delete account whose state is large is temporarily banned.
type TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 15}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Signature does not match the provided actions and given signer public key.
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 16}
}

// Receiver of the transaction doesn't match Sender of the delegate action
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId   string `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	ReceiverId string `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) ProtoMessage() {
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 17}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

// Delegate action has expired. `max_block_height` is less than actual block height.
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 18}
}

// The given public key doesn't exist for Sender account
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *InvalidAccessKeyError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 19}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError) GetError() *InvalidAccessKeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// DelegateAction nonce must be greater sender[public_key].nonce
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegateNonce uint64 `protobuf:"varint,1,opt,name=delegate_nonce,json=delegateNonce,proto3" json:"delegate_nonce,omitempty"`
	AkNonce       uint64 `protobuf:"varint,2,opt,name=ak_nonce,json=akNonce,proto3" json:"ak_nonce,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 20}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) GetDelegateNonce() uint64 {
	if x != nil {
		return x.DelegateNonce
	}
	return 0
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce) GetAkNonce() uint64 {
	if x != nil {
		return x.AkNonce
	}
	return 0
}

// DelegateAction nonce is larger than the upper bound given by the block height
type TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegateNonce uint64 `protobuf:"varint,1,opt,name=delegate_nonce,json=delegateNonce,proto3" json:"delegate_nonce,omitempty"`
	UpperBound    uint64 `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) ProtoMessage() {}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 21}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) GetDelegateNonce() uint64 {
	if x != nil {
		return x.DelegateNonce
	}
	return 0
}

func (x *TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge) GetUpperBound() uint64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

// Non-refundable storage transfer to an existing account is not allowed according to NEP-491.
type TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) Reset() {
	*x = TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) ProtoMessage() {
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount.ProtoReflect.Descriptor instead.
func (*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 0, 0, 22}
}

func (x *TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type TxExecutionError_InvalidTxError_InvalidSignerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId string `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_InvalidSignerId) Reset() {
	*x = TxExecutionError_InvalidTxError_InvalidSignerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_InvalidSignerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_InvalidSignerId) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_InvalidSignerId) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_InvalidSignerId.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_InvalidSignerId) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *TxExecutionError_InvalidTxError_InvalidSignerId) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

type TxExecutionError_InvalidTxError_SignerDoesNotExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId string `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_SignerDoesNotExist) Reset() {
	*x = TxExecutionError_InvalidTxError_SignerDoesNotExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_SignerDoesNotExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_SignerDoesNotExist) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_SignerDoesNotExist) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_SignerDoesNotExist.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_SignerDoesNotExist) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *TxExecutionError_InvalidTxError_SignerDoesNotExist) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

type TxExecutionError_InvalidTxError_InvalidNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxNonce uint64 `protobuf:"varint,1,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
	AkNonce uint64 `protobuf:"varint,2,opt,name=ak_nonce,json=akNonce,proto3" json:"ak_nonce,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_InvalidNonce) Reset() {
	*x = TxExecutionError_InvalidTxError_InvalidNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_InvalidNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_InvalidNonce) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_InvalidNonce) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_InvalidNonce.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_InvalidNonce) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *TxExecutionError_InvalidTxError_InvalidNonce) GetTxNonce() uint64 {
	if x != nil {
		return x.TxNonce
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_InvalidNonce) GetAkNonce() uint64 {
	if x != nil {
		return x.AkNonce
	}
	return 0
}

type TxExecutionError_InvalidTxError_NonceTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxNonce    uint64 `protobuf:"varint,1,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
	UpperBound uint64 `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_NonceTooLarge) Reset() {
	*x = TxExecutionError_InvalidTxError_NonceTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_NonceTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_NonceTooLarge) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_NonceTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_NonceTooLarge.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_NonceTooLarge) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 3}
}

func (x *TxExecutionError_InvalidTxError_NonceTooLarge) GetTxNonce() uint64 {
	if x != nil {
		return x.TxNonce
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_NonceTooLarge) GetUpperBound() uint64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

type TxExecutionError_InvalidTxError_InvalidReceiverId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverId string `protobuf:"bytes,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_InvalidReceiverId) Reset() {
	*x = TxExecutionError_InvalidTxError_InvalidReceiverId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_InvalidReceiverId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_InvalidReceiverId) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_InvalidReceiverId) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_InvalidReceiverId.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_InvalidReceiverId) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 4}
}

func (x *TxExecutionError_InvalidTxError_InvalidReceiverId) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

type TxExecutionError_InvalidTxError_InvalidSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_InvalidSignature) Reset() {
	*x = TxExecutionError_InvalidTxError_InvalidSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_InvalidSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_InvalidSignature) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_InvalidSignature) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_InvalidSignature.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_InvalidSignature) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 5}
}

type TxExecutionError_InvalidTxError_NotEnoughBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId    string `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	U128Balance []byte `protobuf:"bytes,2,opt,name=u128_balance,json=u128Balance,proto3" json:"u128_balance,omitempty"`
	U128Cost    []byte `protobuf:"bytes,3,opt,name=u128_cost,json=u128Cost,proto3" json:"u128_cost,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) Reset() {
	*x = TxExecutionError_InvalidTxError_NotEnoughBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_NotEnoughBalance) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_NotEnoughBalance.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_NotEnoughBalance) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 6}
}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) GetU128Balance() []byte {
	if x != nil {
		return x.U128Balance
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_NotEnoughBalance) GetU128Cost() []byte {
	if x != nil {
		return x.U128Cost
	}
	return nil
}

type TxExecutionError_InvalidTxError_LackBalanceForState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId   string `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	U128Amount []byte `protobuf:"bytes,2,opt,name=u128_amount,json=u128Amount,proto3" json:"u128_amount,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_LackBalanceForState) Reset() {
	*x = TxExecutionError_InvalidTxError_LackBalanceForState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_LackBalanceForState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_LackBalanceForState) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_LackBalanceForState) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_LackBalanceForState.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_LackBalanceForState) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 7}
}

func (x *TxExecutionError_InvalidTxError_LackBalanceForState) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *TxExecutionError_InvalidTxError_LackBalanceForState) GetU128Amount() []byte {
	if x != nil {
		return x.U128Amount
	}
	return nil
}

type TxExecutionError_InvalidTxError_CostOverflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_CostOverflow) Reset() {
	*x = TxExecutionError_InvalidTxError_CostOverflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_CostOverflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_CostOverflow) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_CostOverflow) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_CostOverflow.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_CostOverflow) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 8}
}

type TxExecutionError_InvalidTxError_InvalidChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_InvalidChain) Reset() {
	*x = TxExecutionError_InvalidTxError_InvalidChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_InvalidChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_InvalidChain) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_InvalidChain) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_InvalidChain.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_InvalidChain) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 9}
}

type TxExecutionError_InvalidTxError_Expired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_Expired) Reset() {
	*x = TxExecutionError_InvalidTxError_Expired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_Expired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_Expired) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_Expired) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_Expired.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_Expired) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 10}
}

type TxExecutionError_InvalidTxError_ActionsValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne_
	//	*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature_
	Variant isTxExecutionError_InvalidTxError_ActionsValidation_Variant `protobuf_oneof:"variant"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11}
}

func (m *TxExecutionError_InvalidTxError_ActionsValidation) GetVariant() isTxExecutionError_InvalidTxError_ActionsValidation_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetDeleteActionMustBeFinal() *TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal_); ok {
		return x.DeleteActionMustBeFinal
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetTotalPrepaidGasExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded_); ok {
		return x.TotalPrepaidGasExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetTotalNumberOfActionsExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded_); ok {
		return x.TotalNumberOfActionsExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetAddKeyMethodNamesNumberOfBytesExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded_); ok {
		return x.AddKeyMethodNamesNumberOfBytesExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetAddKeyMethodNameLengthExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded_); ok {
		return x.AddKeyMethodNameLengthExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetIntegerOverflow() *TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow_); ok {
		return x.IntegerOverflow
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetInvalidAccountId() *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId_); ok {
		return x.InvalidAccountId
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetContractSizeExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded_); ok {
		return x.ContractSizeExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetFunctionCallMethodNameLengthExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded_); ok {
		return x.FunctionCallMethodNameLengthExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetFunctionCallArgumentsLengthExceeded() *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded_); ok {
		return x.FunctionCallArgumentsLengthExceeded
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetUnsuitableStakingKey() *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey_); ok {
		return x.UnsuitableStakingKey
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetFunctionCallZeroAttachedGas() *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas_); ok {
		return x.FunctionCallZeroAttachedGas
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetDelegateActionMustBeOnlyOne() *TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne_); ok {
		return x.DelegateActionMustBeOnlyOne
	}
	return nil
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation) GetUnsupportedProtocolFeature() *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature {
	if x, ok := x.GetVariant().(*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature_); ok {
		return x.UnsupportedProtocolFeature
	}
	return nil
}

type isTxExecutionError_InvalidTxError_ActionsValidation_Variant interface {
	isTxExecutionError_InvalidTxError_ActionsValidation_Variant()
}

type TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal_ struct {
	DeleteActionMustBeFinal *TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal `protobuf:"bytes,1,opt,name=delete_action_must_be_final,json=deleteActionMustBeFinal,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded_ struct {
	TotalPrepaidGasExceeded *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded `protobuf:"bytes,2,opt,name=total_prepaid_gas_exceeded,json=totalPrepaidGasExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded_ struct {
	TotalNumberOfActionsExceeded *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded `protobuf:"bytes,3,opt,name=total_number_of_actions_exceeded,json=totalNumberOfActionsExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded_ struct {
	AddKeyMethodNamesNumberOfBytesExceeded *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded `protobuf:"bytes,4,opt,name=add_key_method_names_number_of_bytes_exceeded,json=addKeyMethodNamesNumberOfBytesExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded_ struct {
	AddKeyMethodNameLengthExceeded *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded `protobuf:"bytes,5,opt,name=add_key_method_name_length_exceeded,json=addKeyMethodNameLengthExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow_ struct {
	IntegerOverflow *TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow `protobuf:"bytes,6,opt,name=integer_overflow,json=integerOverflow,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId_ struct {
	InvalidAccountId *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId `protobuf:"bytes,7,opt,name=invalid_account_id,json=invalidAccountId,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded_ struct {
	ContractSizeExceeded *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded `protobuf:"bytes,8,opt,name=contract_size_exceeded,json=contractSizeExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded_ struct {
	FunctionCallMethodNameLengthExceeded *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded `protobuf:"bytes,9,opt,name=function_call_method_name_length_exceeded,json=functionCallMethodNameLengthExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded_ struct {
	FunctionCallArgumentsLengthExceeded *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded `protobuf:"bytes,10,opt,name=function_call_arguments_length_exceeded,json=functionCallArgumentsLengthExceeded,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey_ struct {
	UnsuitableStakingKey *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey `protobuf:"bytes,11,opt,name=unsuitable_staking_key,json=unsuitableStakingKey,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas_ struct {
	FunctionCallZeroAttachedGas *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas `protobuf:"bytes,12,opt,name=function_call_zero_attached_gas,json=functionCallZeroAttachedGas,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne_ struct {
	DelegateActionMustBeOnlyOne *TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne `protobuf:"bytes,13,opt,name=delegate_action_must_be_only_one,json=delegateActionMustBeOnlyOne,proto3,oneof"`
}

type TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature_ struct {
	UnsupportedProtocolFeature *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature `protobuf:"bytes,14,opt,name=unsupported_protocol_feature,json=unsupportedProtocolFeature,proto3,oneof"`
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature_) isTxExecutionError_InvalidTxError_ActionsValidation_Variant() {
}

type TxExecutionError_InvalidTxError_TransactionSizeExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size  uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_TransactionSizeExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_TransactionSizeExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_TransactionSizeExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_TransactionSizeExceeded) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_TransactionSizeExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_TransactionSizeExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_TransactionSizeExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 12}
}

func (x *TxExecutionError_InvalidTxError_TransactionSizeExceeded) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_TransactionSizeExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 0}
}

type TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPrepaidGas uint64 `protobuf:"varint,1,opt,name=total_prepaid_gas,json=totalPrepaidGas,proto3" json:"total_prepaid_gas,omitempty"`
	Limit           uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 1}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) GetTotalPrepaidGas() uint64 {
	if x != nil {
		return x.TotalPrepaidGas
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNumberOfActions uint64 `protobuf:"varint,1,opt,name=total_number_of_actions,json=totalNumberOfActions,proto3" json:"total_number_of_actions,omitempty"`
	Limit                uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 2}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) GetTotalNumberOfActions() uint64 {
	if x != nil {
		return x.TotalNumberOfActions
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNumberOfBytes uint64 `protobuf:"varint,1,opt,name=total_number_of_bytes,json=totalNumberOfBytes,proto3" json:"total_number_of_bytes,omitempty"`
	Limit              uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 3}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) GetTotalNumberOfBytes() uint64 {
	if x != nil {
		return x.TotalNumberOfBytes
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 4}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 5}
}

type TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 6}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size  uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 7}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 8}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 9}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *common.PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 10}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey) GetPublicKey() *common.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 11}
}

type TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne) ProtoMessage() {
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 12}
}

type TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolFeature string `protobuf:"bytes,1,opt,name=protocol_feature,json=protocolFeature,proto3" json:"protocol_feature,omitempty"`
	Version         uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) Reset() {
	*x = TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) ProtoMessage() {}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_errors_execution_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature.ProtoReflect.Descriptor instead.
func (*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP(), []int{1, 1, 11, 13}
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) GetProtocolFeature() string {
	if x != nil {
		return x.ProtocolFeature
	}
	return ""
}

func (x *TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_payloads_near_block_transaction_errors_execution_proto protoreflect.FileDescriptor

var file_payloads_near_block_transaction_errors_execution_proto_rawDesc = []byte{
	0x0a, 0x36, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x1a, 0x21, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65,
	0x61, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e,
	0x65, 0x61, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xde, 0x09, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x14, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x6d,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x74, 0x0a,
	0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x74, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x74, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x54, 0x0a, 0x10,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x1a, 0x35, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a,
	0xb9, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x31, 0x32, 0x38, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x31, 0x32, 0x38, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x75, 0x31, 0x32, 0x38, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0xb4, 0x5c, 0x0a, 0x10, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x63, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe1, 0x2d, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xd2, 0x2c, 0x0a, 0x0f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x91, 0x01, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62, 0x79,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x72, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a,
	0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x65, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5a, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x16,
	0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a,
	0x10, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x54, 0x72,
	0x69, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x79,
	0x0a, 0x0e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x54, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x69, 0x6e,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xa1,
	0x01, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0xbd, 0x01, 0x0a, 0x26, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x00, 0x52, 0x22,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0xa8, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xb0, 0x01,
	0x0a, 0x21, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0xd8, 0x01, 0x0a, 0x31, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x65, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x2a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x17,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e,
	0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0xa4, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x60, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x2b, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x26, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x35, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x96, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x5f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x78, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a,
	0x76, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x55,
	0x0a, 0x13, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x31, 0x32, 0x38, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2f, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x90, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x31, 0x32, 0x38,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x31, 0x32, 0x38,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x31,
	0x32, 0x38, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x7f, 0x0a, 0x11, 0x49, 0x6e, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x75, 0x31, 0x32, 0x38, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x31, 0x32, 0x38, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x75, 0x31, 0x32, 0x38, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x1a, 0x57, 0x0a, 0x11, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x61, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x44, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x43, 0x0a, 0x22, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x6a, 0x0a, 0x2a, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x1a, 0x63, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x43, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x5e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6b,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6b,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x65, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x47, 0x0a, 0x26,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xf0, 0x2c, 0x0a, 0x0e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x68, 0x0a,
	0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x7f,
	0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12,
	0x6b, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x7b, 0x0a,
	0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x62, 0x6f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x11, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x78, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x16, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6c,
	0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x6b, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x2e, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x31, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44,
	0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x44, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6b, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x4b,
	0x0a, 0x0d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x78, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x34, 0x0a, 0x11, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x6f, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x31,
	0x32, 0x38, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x31, 0x32,
	0x38, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x31,
	0x32, 0x38, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x53, 0x0a, 0x13, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x31,
	0x32, 0x38, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x75, 0x31, 0x32, 0x38, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e, 0x0a, 0x0c, 0x43,
	0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x0e, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x09, 0x0a, 0x07, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xe4, 0x1a, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa1, 0x01, 0x0a,
	0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x61, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0xa0, 0x01, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x61, 0x73,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x61, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0xd1, 0x01, 0x0a, 0x2d, 0x61, 0x64, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x26, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x23, 0x61,
	0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x8a, 0x01,
	0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x62, 0x6f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0xc9, 0x01, 0x0a, 0x29, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x24, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0xc5, 0x01, 0x0a, 0x27, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6d, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x23, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x75, 0x6e, 0x73, 0x75,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x75,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0xad, 0x01, 0x0a, 0x1f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x62, 0x6f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x47, 0x61,
	0x73, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x47, 0x61, 0x73,
	0x12, 0xae, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e,
	0x65, 0x12, 0xa8, 0x01, 0x0a, 0x1c, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x1a, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x19, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74,
	0x42, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0x5b, 0x0a, 0x17, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x61, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x47, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x6b, 0x0a, 0x1c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0x71, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x11, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x31, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x54, 0x0a, 0x24,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x53, 0x0a, 0x23, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x58, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x75, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x1a, 0x1d, 0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x47, 0x61, 0x73,
	0x1a, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x1a,
	0x61, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0x43, 0x0a,
	0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payloads_near_block_transaction_errors_execution_proto_rawDescOnce sync.Once
	file_payloads_near_block_transaction_errors_execution_proto_rawDescData = file_payloads_near_block_transaction_errors_execution_proto_rawDesc
)

func file_payloads_near_block_transaction_errors_execution_proto_rawDescGZIP() []byte {
	file_payloads_near_block_transaction_errors_execution_proto_rawDescOnce.Do(func() {
		file_payloads_near_block_transaction_errors_execution_proto_rawDescData = protoimpl.X.CompressGZIP(file_payloads_near_block_transaction_errors_execution_proto_rawDescData)
	})
	return file_payloads_near_block_transaction_errors_execution_proto_rawDescData
}

var file_payloads_near_block_transaction_errors_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_payloads_near_block_transaction_errors_execution_proto_goTypes = []any{
	(*InvalidAccessKeyError)(nil),                                                                    // 0: borealis.payloads.near.InvalidAccessKeyError
	(*TxExecutionError)(nil),                                                                         // 1: borealis.payloads.near.TxExecutionError
	(*InvalidAccessKeyError_AccessKeyNotFound)(nil),                                                  // 2: borealis.payloads.near.InvalidAccessKeyError.AccessKeyNotFound
	(*InvalidAccessKeyError_ReceiverMismatch)(nil),                                                   // 3: borealis.payloads.near.InvalidAccessKeyError.ReceiverMismatch
	(*InvalidAccessKeyError_MethodNameMismatch)(nil),                                                 // 4: borealis.payloads.near.InvalidAccessKeyError.MethodNameMismatch
	(*InvalidAccessKeyError_RequiresFullAccess)(nil),                                                 // 5: borealis.payloads.near.InvalidAccessKeyError.RequiresFullAccess
	(*InvalidAccessKeyError_NotEnoughAllowance)(nil),                                                 // 6: borealis.payloads.near.InvalidAccessKeyError.NotEnoughAllowance
	(*InvalidAccessKeyError_DepositWithFunctionCall)(nil),                                            // 7: borealis.payloads.near.InvalidAccessKeyError.DepositWithFunctionCall
	(*TxExecutionError_ActionError)(nil),                                                             // 8: borealis.payloads.near.TxExecutionError.ActionError
	(*TxExecutionError_InvalidTxError)(nil),                                                          // 9: borealis.payloads.near.TxExecutionError.InvalidTxError
	(*TxExecutionError_ActionError_ActionErrorKind)(nil),                                             // 10: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind
	(*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists)(nil),                        // 11: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AccountAlreadyExists
	(*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist)(nil),                         // 12: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AccountDoesNotExist
	(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar)(nil),                // 13: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.CreateAccountOnlyByRegistrar
	(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed)(nil),                     // 14: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.CreateAccountNotAllowed
	(*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission)(nil),                           // 15: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.ActorNoPermission
	(*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist)(nil),                       // 16: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteKeyDoesNotExist
	(*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists)(nil),                         // 17: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AddKeyAlreadyExists
	(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking)(nil),                        // 18: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteAccountStaking
	(*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState)(nil),                         // 19: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.LackBalanceForState
	(*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake)(nil),                              // 20: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.TriesToUnstake
	(*TxExecutionError_ActionError_ActionErrorKind_TriesToStake)(nil),                                // 21: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.TriesToStake
	(*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake)(nil),                           // 22: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.InsufficientStake
	(*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError)(nil),                           // 23: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.FunctionCallError
	(*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError)(nil),                   // 24: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.NewReceiptValidationError
	(*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed)(nil),          // 25: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.OnlyImplicitAccountCreationAllowed
	(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState)(nil),                 // 26: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteAccountWithLargeState
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature)(nil),              // 27: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionInvalidSignature
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver)(nil),  // 28: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionSenderDoesNotMatchTxReceiver
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired)(nil),                       // 29: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionExpired
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError)(nil),                // 30: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionAccessKeyError
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce)(nil),                  // 31: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionInvalidNonce
	(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge)(nil),                 // 32: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionNonceTooLarge
	(*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount)(nil),      // 33: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.NonRefundableTransferToExistingAccount
	(*TxExecutionError_InvalidTxError_InvalidSignerId)(nil),                                          // 34: borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidSignerId
	(*TxExecutionError_InvalidTxError_SignerDoesNotExist)(nil),                                       // 35: borealis.payloads.near.TxExecutionError.InvalidTxError.SignerDoesNotExist
	(*TxExecutionError_InvalidTxError_InvalidNonce)(nil),                                             // 36: borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidNonce
	(*TxExecutionError_InvalidTxError_NonceTooLarge)(nil),                                            // 37: borealis.payloads.near.TxExecutionError.InvalidTxError.NonceTooLarge
	(*TxExecutionError_InvalidTxError_InvalidReceiverId)(nil),                                        // 38: borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidReceiverId
	(*TxExecutionError_InvalidTxError_InvalidSignature)(nil),                                         // 39: borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidSignature
	(*TxExecutionError_InvalidTxError_NotEnoughBalance)(nil),                                         // 40: borealis.payloads.near.TxExecutionError.InvalidTxError.NotEnoughBalance
	(*TxExecutionError_InvalidTxError_LackBalanceForState)(nil),                                      // 41: borealis.payloads.near.TxExecutionError.InvalidTxError.LackBalanceForState
	(*TxExecutionError_InvalidTxError_CostOverflow)(nil),                                             // 42: borealis.payloads.near.TxExecutionError.InvalidTxError.CostOverflow
	(*TxExecutionError_InvalidTxError_InvalidChain)(nil),                                             // 43: borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidChain
	(*TxExecutionError_InvalidTxError_Expired)(nil),                                                  // 44: borealis.payloads.near.TxExecutionError.InvalidTxError.Expired
	(*TxExecutionError_InvalidTxError_ActionsValidation)(nil),                                        // 45: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation
	(*TxExecutionError_InvalidTxError_TransactionSizeExceeded)(nil),                                  // 46: borealis.payloads.near.TxExecutionError.InvalidTxError.TransactionSizeExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal)(nil),                // 47: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.DeleteActionMustBeFinal
	(*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded)(nil),                // 48: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.TotalPrepaidGasExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded)(nil),           // 49: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.TotalNumberOfActionsExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded)(nil), // 50: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.AddKeyMethodNamesNumberOfBytesExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded)(nil),         // 51: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.AddKeyMethodNameLengthExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow)(nil),                        // 52: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.IntegerOverflow
	(*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId)(nil),                       // 53: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.InvalidAccountId
	(*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded)(nil),                   // 54: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.ContractSizeExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded)(nil),   // 55: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallMethodNameLengthExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded)(nil),    // 56: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallArgumentsLengthExceeded
	(*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey)(nil),                   // 57: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.UnsuitableStakingKey
	(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas)(nil),            // 58: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallZeroAttachedGas
	(*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne)(nil),            // 59: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.DelegateActionMustBeOnlyOne
	(*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature)(nil),             // 60: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.UnsupportedProtocolFeature
	(*common.PublicKey)(nil),       // 61: borealis.payloads.near.PublicKey
	(*FunctionCallErrorSer)(nil),   // 62: borealis.payloads.near.FunctionCallErrorSer
	(*ReceiptValidationError)(nil), // 63: borealis.payloads.near.ReceiptValidationError
}
var file_payloads_near_block_transaction_errors_execution_proto_depIdxs = []int32{
	2,  // 0: borealis.payloads.near.InvalidAccessKeyError.access_key_not_found:type_name -> borealis.payloads.near.InvalidAccessKeyError.AccessKeyNotFound
	3,  // 1: borealis.payloads.near.InvalidAccessKeyError.receiver_mismatch:type_name -> borealis.payloads.near.InvalidAccessKeyError.ReceiverMismatch
	4,  // 2: borealis.payloads.near.InvalidAccessKeyError.method_name_mismatch:type_name -> borealis.payloads.near.InvalidAccessKeyError.MethodNameMismatch
	5,  // 3: borealis.payloads.near.InvalidAccessKeyError.requires_full_access:type_name -> borealis.payloads.near.InvalidAccessKeyError.RequiresFullAccess
	6,  // 4: borealis.payloads.near.InvalidAccessKeyError.not_enough_allowance:type_name -> borealis.payloads.near.InvalidAccessKeyError.NotEnoughAllowance
	7,  // 5: borealis.payloads.near.InvalidAccessKeyError.deposit_with_function_call:type_name -> borealis.payloads.near.InvalidAccessKeyError.DepositWithFunctionCall
	8,  // 6: borealis.payloads.near.TxExecutionError.action_error:type_name -> borealis.payloads.near.TxExecutionError.ActionError
	9,  // 7: borealis.payloads.near.TxExecutionError.invalid_tx_error:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError
	61, // 8: borealis.payloads.near.InvalidAccessKeyError.AccessKeyNotFound.public_key:type_name -> borealis.payloads.near.PublicKey
	61, // 9: borealis.payloads.near.InvalidAccessKeyError.NotEnoughAllowance.public_key:type_name -> borealis.payloads.near.PublicKey
	10, // 10: borealis.payloads.near.TxExecutionError.ActionError.kind:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind
	0,  // 11: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_access_key_error:type_name -> borealis.payloads.near.InvalidAccessKeyError
	34, // 12: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_signer_id:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidSignerId
	35, // 13: borealis.payloads.near.TxExecutionError.InvalidTxError.signer_does_not_exist:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.SignerDoesNotExist
	36, // 14: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_nonce:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidNonce
	37, // 15: borealis.payloads.near.TxExecutionError.InvalidTxError.nonce_too_large:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.NonceTooLarge
	38, // 16: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_receiver_id:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidReceiverId
	39, // 17: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_signature:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidSignature
	40, // 18: borealis.payloads.near.TxExecutionError.InvalidTxError.not_enough_balance:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.NotEnoughBalance
	41, // 19: borealis.payloads.near.TxExecutionError.InvalidTxError.lack_balance_for_state:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.LackBalanceForState
	42, // 20: borealis.payloads.near.TxExecutionError.InvalidTxError.cost_overflow:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.CostOverflow
	43, // 21: borealis.payloads.near.TxExecutionError.InvalidTxError.invalid_chain:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.InvalidChain
	44, // 22: borealis.payloads.near.TxExecutionError.InvalidTxError.expired:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.Expired
	45, // 23: borealis.payloads.near.TxExecutionError.InvalidTxError.actions_validation:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation
	46, // 24: borealis.payloads.near.TxExecutionError.InvalidTxError.transaction_size_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.TransactionSizeExceeded
	11, // 25: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.account_already_exists:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AccountAlreadyExists
	12, // 26: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.account_does_not_exist:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AccountDoesNotExist
	13, // 27: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.create_account_only_by_registrar:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.CreateAccountOnlyByRegistrar
	14, // 28: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.create_account_not_allowed:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.CreateAccountNotAllowed
	15, // 29: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.actor_no_permission:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.ActorNoPermission
	16, // 30: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delete_key_does_not_exist:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteKeyDoesNotExist
	17, // 31: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.add_key_already_exists:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AddKeyAlreadyExists
	18, // 32: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delete_account_staking:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteAccountStaking
	19, // 33: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.lack_balance_for_state:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.LackBalanceForState
	20, // 34: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.tries_to_unstake:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.TriesToUnstake
	21, // 35: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.tries_to_stake:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.TriesToStake
	22, // 36: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.insufficient_stake:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.InsufficientStake
	23, // 37: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.function_call_error:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.FunctionCallError
	24, // 38: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.new_receipt_validation_error:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.NewReceiptValidationError
	25, // 39: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.only_implicit_account_creation_allowed:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.OnlyImplicitAccountCreationAllowed
	26, // 40: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delete_account_with_large_state:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteAccountWithLargeState
	27, // 41: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_invalid_signature:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionInvalidSignature
	28, // 42: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_sender_does_not_match_tx_receiver:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionSenderDoesNotMatchTxReceiver
	29, // 43: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_expired:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionExpired
	30, // 44: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_access_key_error:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionAccessKeyError
	31, // 45: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_invalid_nonce:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionInvalidNonce
	32, // 46: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.delegate_action_nonce_too_large:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionNonceTooLarge
	33, // 47: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.non_refundable_transfer_to_existing_account:type_name -> borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.NonRefundableTransferToExistingAccount
	61, // 48: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DeleteKeyDoesNotExist.public_key:type_name -> borealis.payloads.near.PublicKey
	61, // 49: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.AddKeyAlreadyExists.public_key:type_name -> borealis.payloads.near.PublicKey
	62, // 50: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.FunctionCallError.error:type_name -> borealis.payloads.near.FunctionCallErrorSer
	63, // 51: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.NewReceiptValidationError.error:type_name -> borealis.payloads.near.ReceiptValidationError
	0,  // 52: borealis.payloads.near.TxExecutionError.ActionError.ActionErrorKind.DelegateActionAccessKeyError.error:type_name -> borealis.payloads.near.InvalidAccessKeyError
	47, // 53: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.delete_action_must_be_final:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.DeleteActionMustBeFinal
	48, // 54: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.total_prepaid_gas_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.TotalPrepaidGasExceeded
	49, // 55: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.total_number_of_actions_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.TotalNumberOfActionsExceeded
	50, // 56: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.add_key_method_names_number_of_bytes_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.AddKeyMethodNamesNumberOfBytesExceeded
	51, // 57: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.add_key_method_name_length_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.AddKeyMethodNameLengthExceeded
	52, // 58: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.integer_overflow:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.IntegerOverflow
	53, // 59: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.invalid_account_id:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.InvalidAccountId
	54, // 60: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.contract_size_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.ContractSizeExceeded
	55, // 61: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.function_call_method_name_length_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallMethodNameLengthExceeded
	56, // 62: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.function_call_arguments_length_exceeded:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallArgumentsLengthExceeded
	57, // 63: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.unsuitable_staking_key:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.UnsuitableStakingKey
	58, // 64: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.function_call_zero_attached_gas:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.FunctionCallZeroAttachedGas
	59, // 65: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.delegate_action_must_be_only_one:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.DelegateActionMustBeOnlyOne
	60, // 66: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.unsupported_protocol_feature:type_name -> borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.UnsupportedProtocolFeature
	61, // 67: borealis.payloads.near.TxExecutionError.InvalidTxError.ActionsValidation.UnsuitableStakingKey.public_key:type_name -> borealis.payloads.near.PublicKey
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_payloads_near_block_transaction_errors_execution_proto_init() }
func file_payloads_near_block_transaction_errors_execution_proto_init() {
	if File_payloads_near_block_transaction_errors_execution_proto != nil {
		return
	}
	file_payloads_near_block_transaction_errors_receipt_validation_proto_init()
	file_payloads_near_block_transaction_errors_function_call_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_AccessKeyNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_ReceiverMismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_MethodNameMismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_RequiresFullAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_NotEnoughAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidAccessKeyError_DepositWithFunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_TriesToStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_InvalidSignerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_SignerDoesNotExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_InvalidNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_NonceTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_InvalidReceiverId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_InvalidSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_NotEnoughBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_LackBalanceForState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_CostOverflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_InvalidChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_Expired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_TransactionSizeExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_errors_execution_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[0].OneofWrappers = []any{
		(*InvalidAccessKeyError_AccessKeyNotFound_)(nil),
		(*InvalidAccessKeyError_ReceiverMismatch_)(nil),
		(*InvalidAccessKeyError_MethodNameMismatch_)(nil),
		(*InvalidAccessKeyError_RequiresFullAccess_)(nil),
		(*InvalidAccessKeyError_NotEnoughAllowance_)(nil),
		(*InvalidAccessKeyError_DepositWithFunctionCall_)(nil),
	}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[1].OneofWrappers = []any{
		(*TxExecutionError_ActionError_)(nil),
		(*TxExecutionError_InvalidTxError_)(nil),
	}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[8].OneofWrappers = []any{}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[9].OneofWrappers = []any{
		(*TxExecutionError_InvalidTxError_InvalidAccessKeyError)(nil),
		(*TxExecutionError_InvalidTxError_InvalidSignerId_)(nil),
		(*TxExecutionError_InvalidTxError_SignerDoesNotExist_)(nil),
		(*TxExecutionError_InvalidTxError_InvalidNonce_)(nil),
		(*TxExecutionError_InvalidTxError_NonceTooLarge_)(nil),
		(*TxExecutionError_InvalidTxError_InvalidReceiverId_)(nil),
		(*TxExecutionError_InvalidTxError_InvalidSignature_)(nil),
		(*TxExecutionError_InvalidTxError_NotEnoughBalance_)(nil),
		(*TxExecutionError_InvalidTxError_LackBalanceForState_)(nil),
		(*TxExecutionError_InvalidTxError_CostOverflow_)(nil),
		(*TxExecutionError_InvalidTxError_InvalidChain_)(nil),
		(*TxExecutionError_InvalidTxError_Expired_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_)(nil),
		(*TxExecutionError_InvalidTxError_TransactionSizeExceeded_)(nil),
	}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[10].OneofWrappers = []any{
		(*TxExecutionError_ActionError_ActionErrorKind_AccountAlreadyExists_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_AccountDoesNotExist_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountOnlyByRegistrar_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_CreateAccountNotAllowed_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_ActorNoPermission_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DeleteKeyDoesNotExist_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_AddKeyAlreadyExists_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountStaking_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_LackBalanceForState_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_TriesToUnstake_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_TriesToStake_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_InsufficientStake_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_FunctionCallError_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_NewReceiptValidationError_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_OnlyImplicitAccountCreationAllowed_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DeleteAccountWithLargeState_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidSignature_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionSenderDoesNotMatchTxReceiver_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionExpired_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionAccessKeyError_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionInvalidNonce_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_DelegateActionNonceTooLarge_)(nil),
		(*TxExecutionError_ActionError_ActionErrorKind_NonRefundableTransferToExistingAccount_)(nil),
	}
	file_payloads_near_block_transaction_errors_execution_proto_msgTypes[45].OneofWrappers = []any{
		(*TxExecutionError_InvalidTxError_ActionsValidation_DeleteActionMustBeFinal_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_TotalPrepaidGasExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_TotalNumberOfActionsExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNamesNumberOfBytesExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_AddKeyMethodNameLengthExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_IntegerOverflow_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_InvalidAccountId_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_ContractSizeExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallMethodNameLengthExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallArgumentsLengthExceeded_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_UnsuitableStakingKey_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_FunctionCallZeroAttachedGas_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_DelegateActionMustBeOnlyOne_)(nil),
		(*TxExecutionError_InvalidTxError_ActionsValidation_UnsupportedProtocolFeature_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payloads_near_block_transaction_errors_execution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payloads_near_block_transaction_errors_execution_proto_goTypes,
		DependencyIndexes: file_payloads_near_block_transaction_errors_execution_proto_depIdxs,
		MessageInfos:      file_payloads_near_block_transaction_errors_execution_proto_msgTypes,
	}.Build()
	File_payloads_near_block_transaction_errors_execution_proto = out.File
	file_payloads_near_block_transaction_errors_execution_proto_rawDesc = nil
	file_payloads_near_block_transaction_errors_execution_proto_goTypes = nil
	file_payloads_near_block_transaction_errors_execution_proto_depIdxs = nil
}
