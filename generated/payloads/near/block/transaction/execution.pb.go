// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: payloads/near/block/transaction/execution.proto

package pb_transaction

import (
	errors "github.com/aurora-is-near/borealis-prototypes-go/generated/payloads/near/block/transaction/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_LEFT  Direction = 0
	Direction_RIGHT Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "LEFT",
		1: "RIGHT",
	}
	Direction_value = map[string]int32{
		"LEFT":  0,
		"RIGHT": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_payloads_near_block_transaction_execution_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_payloads_near_block_transaction_execution_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{0}
}

type CostCategory int32

const (
	CostCategory_ACTION_COST    CostCategory = 0
	CostCategory_WASM_HOST_COST CostCategory = 1
)

// Enum value maps for CostCategory.
var (
	CostCategory_name = map[int32]string{
		0: "ACTION_COST",
		1: "WASM_HOST_COST",
	}
	CostCategory_value = map[string]int32{
		"ACTION_COST":    0,
		"WASM_HOST_COST": 1,
	}
)

func (x CostCategory) Enum() *CostCategory {
	p := new(CostCategory)
	*p = x
	return p
}

func (x CostCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CostCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_payloads_near_block_transaction_execution_proto_enumTypes[1].Descriptor()
}

func (CostCategory) Type() protoreflect.EnumType {
	return &file_payloads_near_block_transaction_execution_proto_enumTypes[1]
}

func (x CostCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CostCategory.Descriptor instead.
func (CostCategory) EnumDescriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{1}
}

type ActionCosts int32

const (
	ActionCosts_CREATE_ACCOUNT             ActionCosts = 0
	ActionCosts_DELETE_ACCOUNT             ActionCosts = 1
	ActionCosts_DEPLOY_CONTRACT            ActionCosts = 2
	ActionCosts_FUNCTION_CALL              ActionCosts = 3
	ActionCosts_TRANSFER                   ActionCosts = 4
	ActionCosts_STAKE                      ActionCosts = 5
	ActionCosts_ADD_KEY                    ActionCosts = 6
	ActionCosts_DELETE_KEY                 ActionCosts = 7
	ActionCosts_VALUE_RETURN               ActionCosts = 8
	ActionCosts_NEW_RECEIPT                ActionCosts = 9
	ActionCosts_DEPLOY_CONTRACT_BASE       ActionCosts = 10
	ActionCosts_DEPLOY_CONTRACT_BYTE       ActionCosts = 11
	ActionCosts_FUNCTION_CALL_BASE         ActionCosts = 12
	ActionCosts_FUNCTION_CALL_BYTE         ActionCosts = 13
	ActionCosts_ADD_FULL_ACCESS_KEY        ActionCosts = 14
	ActionCosts_ADD_FUNCTION_CALL_KEY_BASE ActionCosts = 15
	ActionCosts_ADD_FUNCTION_CALL_KEY_BYTE ActionCosts = 16
	ActionCosts_NEW_ACTION_RECEIPT         ActionCosts = 17
	ActionCosts_NEW_DATA_RECEIPT_BASE      ActionCosts = 18
	ActionCosts_NEW_DATA_RECEIPT_BYTE      ActionCosts = 19
	ActionCosts_DELEGATE                   ActionCosts = 20
)

// Enum value maps for ActionCosts.
var (
	ActionCosts_name = map[int32]string{
		0:  "CREATE_ACCOUNT",
		1:  "DELETE_ACCOUNT",
		2:  "DEPLOY_CONTRACT",
		3:  "FUNCTION_CALL",
		4:  "TRANSFER",
		5:  "STAKE",
		6:  "ADD_KEY",
		7:  "DELETE_KEY",
		8:  "VALUE_RETURN",
		9:  "NEW_RECEIPT",
		10: "DEPLOY_CONTRACT_BASE",
		11: "DEPLOY_CONTRACT_BYTE",
		12: "FUNCTION_CALL_BASE",
		13: "FUNCTION_CALL_BYTE",
		14: "ADD_FULL_ACCESS_KEY",
		15: "ADD_FUNCTION_CALL_KEY_BASE",
		16: "ADD_FUNCTION_CALL_KEY_BYTE",
		17: "NEW_ACTION_RECEIPT",
		18: "NEW_DATA_RECEIPT_BASE",
		19: "NEW_DATA_RECEIPT_BYTE",
		20: "DELEGATE",
	}
	ActionCosts_value = map[string]int32{
		"CREATE_ACCOUNT":             0,
		"DELETE_ACCOUNT":             1,
		"DEPLOY_CONTRACT":            2,
		"FUNCTION_CALL":              3,
		"TRANSFER":                   4,
		"STAKE":                      5,
		"ADD_KEY":                    6,
		"DELETE_KEY":                 7,
		"VALUE_RETURN":               8,
		"NEW_RECEIPT":                9,
		"DEPLOY_CONTRACT_BASE":       10,
		"DEPLOY_CONTRACT_BYTE":       11,
		"FUNCTION_CALL_BASE":         12,
		"FUNCTION_CALL_BYTE":         13,
		"ADD_FULL_ACCESS_KEY":        14,
		"ADD_FUNCTION_CALL_KEY_BASE": 15,
		"ADD_FUNCTION_CALL_KEY_BYTE": 16,
		"NEW_ACTION_RECEIPT":         17,
		"NEW_DATA_RECEIPT_BASE":      18,
		"NEW_DATA_RECEIPT_BYTE":      19,
		"DELEGATE":                   20,
	}
)

func (x ActionCosts) Enum() *ActionCosts {
	p := new(ActionCosts)
	*p = x
	return p
}

func (x ActionCosts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCosts) Descriptor() protoreflect.EnumDescriptor {
	return file_payloads_near_block_transaction_execution_proto_enumTypes[2].Descriptor()
}

func (ActionCosts) Type() protoreflect.EnumType {
	return &file_payloads_near_block_transaction_execution_proto_enumTypes[2]
}

func (x ActionCosts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCosts.Descriptor instead.
func (ActionCosts) EnumDescriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{2}
}

type ExtCosts int32

const (
	ExtCosts_BASE                            ExtCosts = 0
	ExtCosts_CONTRACT_COMPILE_BASE           ExtCosts = 1
	ExtCosts_CONTRACT_COMPILE_BYTES          ExtCosts = 2
	ExtCosts_READ_MEMORY_BASE                ExtCosts = 3
	ExtCosts_READ_MEMORY_BYTE                ExtCosts = 4
	ExtCosts_WRITE_MEMORY_BASE               ExtCosts = 5
	ExtCosts_WRITE_MEMORY_BYTE               ExtCosts = 6
	ExtCosts_READ_REGISTER_BASE              ExtCosts = 7
	ExtCosts_READ_REGISTER_BYTE              ExtCosts = 8
	ExtCosts_WRITE_REGISTER_BASE             ExtCosts = 9
	ExtCosts_WRITE_REGISTER_BYTE             ExtCosts = 10
	ExtCosts_UTF8_DECODING_BASE              ExtCosts = 11
	ExtCosts_UTF8_DECODING_BYTE              ExtCosts = 12
	ExtCosts_UTF16_DECODING_BASE             ExtCosts = 13
	ExtCosts_UTF16_DECODING_BYTE             ExtCosts = 14
	ExtCosts_SHA256_BASE                     ExtCosts = 15
	ExtCosts_SHA256_BYTE                     ExtCosts = 16
	ExtCosts_KECCAK256_BASE                  ExtCosts = 17
	ExtCosts_KECCAK256_BYTE                  ExtCosts = 18
	ExtCosts_KECCAK512_BASE                  ExtCosts = 19
	ExtCosts_KECCAK512_BYTE                  ExtCosts = 20
	ExtCosts_RIPEMD160_BASE                  ExtCosts = 21
	ExtCosts_RIPEMD160_BLOCK                 ExtCosts = 22
	ExtCosts_ECRECOVER_BASE                  ExtCosts = 23
	ExtCosts_LOG_BASE                        ExtCosts = 24
	ExtCosts_LOG_BYTE                        ExtCosts = 25
	ExtCosts_STORAGE_WRITE_BASE              ExtCosts = 26
	ExtCosts_STORAGE_WRITE_KEY_BYTE          ExtCosts = 27
	ExtCosts_STORAGE_WRITE_VALUE_BYTE        ExtCosts = 28
	ExtCosts_STORAGE_WRITE_EVICTED_BYTE      ExtCosts = 29
	ExtCosts_STORAGE_READ_BASE               ExtCosts = 30
	ExtCosts_STORAGE_READ_KEY_BYTE           ExtCosts = 31
	ExtCosts_STORAGE_READ_VALUE_BYTE         ExtCosts = 32
	ExtCosts_STORAGE_REMOVE_BASE             ExtCosts = 33
	ExtCosts_STORAGE_REMOVE_KEY_BYTE         ExtCosts = 34
	ExtCosts_STORAGE_REMOVE_RET_VALUE_BYTE   ExtCosts = 35
	ExtCosts_STORAGE_HAS_KEY_BASE            ExtCosts = 36
	ExtCosts_STORAGE_HAS_KEY_BYTE            ExtCosts = 37
	ExtCosts_STORAGE_ITER_CREATE_PREFIX_BASE ExtCosts = 38
	ExtCosts_STORAGE_ITER_CREATE_PREFIX_BYTE ExtCosts = 39
	ExtCosts_STORAGE_ITER_CREATE_RANGE_BASE  ExtCosts = 40
	ExtCosts_STORAGE_ITER_CREATE_FROM_BYTE   ExtCosts = 41
	ExtCosts_STORAGE_ITER_CREATE_TO_BYTE     ExtCosts = 42
	ExtCosts_STORAGE_ITER_NEXT_BASE          ExtCosts = 43
	ExtCosts_STORAGE_ITER_NEXT_KEY_BYTE      ExtCosts = 44
	ExtCosts_STORAGE_ITER_NEXT_VALUE_BYTE    ExtCosts = 45
	ExtCosts_TOUCHING_TRIE_NODE              ExtCosts = 46
	ExtCosts_READ_CACHED_TRIE_NODE           ExtCosts = 47
	ExtCosts_PROMISE_AND_BASE                ExtCosts = 48
	ExtCosts_PROMISE_AND_PER_PROMISE         ExtCosts = 49
	ExtCosts_PROMISE_RETURN                  ExtCosts = 50
	ExtCosts_VALIDATOR_STAKE_BASE            ExtCosts = 51
	ExtCosts_VALIDATOR_TOTAL_STAKE_BASE      ExtCosts = 52
	ExtCosts_ALT_BN128_G1_MULTIEXP_BASE      ExtCosts = 53
	ExtCosts_ALT_BN128_G1_MULTIEXP_ELEMENT   ExtCosts = 54
	ExtCosts_ALT_BN128_PAIRING_CHECK_BASE    ExtCosts = 55
	ExtCosts_ALT_BN128_PAIRING_CHECK_ELEMENT ExtCosts = 56
	ExtCosts_ALT_BN128_G1_SUM_BASE           ExtCosts = 57
	ExtCosts_ALT_BN128_G1_SUM_ELEMENT        ExtCosts = 58
	ExtCosts_ED25519_VERIFY_BASE             ExtCosts = 59
	ExtCosts_ED25519_VERIFY_BYTE             ExtCosts = 60
	ExtCosts_CONTRACT_LOADING_BASE           ExtCosts = 61
	ExtCosts_CONTRACT_LOADING_BYTES          ExtCosts = 62
	ExtCosts_YIELD_CREATE_BASE               ExtCosts = 63
	ExtCosts_YIELD_CREATE_BYTE               ExtCosts = 64
	ExtCosts_YIELD_RESUME_BASE               ExtCosts = 65
	ExtCosts_YIELD_RESUME_BYTE               ExtCosts = 66
	ExtCosts_BLS12381_P1_SUM_BASE            ExtCosts = 67
	ExtCosts_BLS12381_P1_SUM_ELEMENT         ExtCosts = 68
	ExtCosts_BLS12381_P2_SUM_BASE            ExtCosts = 69
	ExtCosts_BLS12381_P2_SUM_ELEMENT         ExtCosts = 70
	ExtCosts_BLS12381_G1_MULTIEXP_BASE       ExtCosts = 71
	ExtCosts_BLS12381_G1_MULTIEXP_ELEMENT    ExtCosts = 72
	ExtCosts_BLS12381_G2_MULTIEXP_BASE       ExtCosts = 73
	ExtCosts_BLS12381_G2_MULTIEXP_ELEMENT    ExtCosts = 74
	ExtCosts_BLS12381_MAP_FP_TO_G1_BASE      ExtCosts = 75
	ExtCosts_BLS12381_MAP_FP_TO_G1_ELEMENT   ExtCosts = 76
	ExtCosts_BLS12381_MAP_FP2_TO_G2_BASE     ExtCosts = 77
	ExtCosts_BLS12381_MAP_FP2_TO_G2_ELEMENT  ExtCosts = 78
	ExtCosts_BLS12381_PAIRING_BASE           ExtCosts = 79
	ExtCosts_BLS12381_PAIRING_ELEMENT        ExtCosts = 80
	ExtCosts_BLS12381_P1_DECOMPRESS_BASE     ExtCosts = 81
	ExtCosts_BLS12381_P1_DECOMPRESS_ELEMENT  ExtCosts = 82
	ExtCosts_BLS12381_P2_DECOMPRESS_BASE     ExtCosts = 83
	ExtCosts_BLS12381_P2_DECOMPRESS_ELEMENT  ExtCosts = 84
)

// Enum value maps for ExtCosts.
var (
	ExtCosts_name = map[int32]string{
		0:  "BASE",
		1:  "CONTRACT_COMPILE_BASE",
		2:  "CONTRACT_COMPILE_BYTES",
		3:  "READ_MEMORY_BASE",
		4:  "READ_MEMORY_BYTE",
		5:  "WRITE_MEMORY_BASE",
		6:  "WRITE_MEMORY_BYTE",
		7:  "READ_REGISTER_BASE",
		8:  "READ_REGISTER_BYTE",
		9:  "WRITE_REGISTER_BASE",
		10: "WRITE_REGISTER_BYTE",
		11: "UTF8_DECODING_BASE",
		12: "UTF8_DECODING_BYTE",
		13: "UTF16_DECODING_BASE",
		14: "UTF16_DECODING_BYTE",
		15: "SHA256_BASE",
		16: "SHA256_BYTE",
		17: "KECCAK256_BASE",
		18: "KECCAK256_BYTE",
		19: "KECCAK512_BASE",
		20: "KECCAK512_BYTE",
		21: "RIPEMD160_BASE",
		22: "RIPEMD160_BLOCK",
		23: "ECRECOVER_BASE",
		24: "LOG_BASE",
		25: "LOG_BYTE",
		26: "STORAGE_WRITE_BASE",
		27: "STORAGE_WRITE_KEY_BYTE",
		28: "STORAGE_WRITE_VALUE_BYTE",
		29: "STORAGE_WRITE_EVICTED_BYTE",
		30: "STORAGE_READ_BASE",
		31: "STORAGE_READ_KEY_BYTE",
		32: "STORAGE_READ_VALUE_BYTE",
		33: "STORAGE_REMOVE_BASE",
		34: "STORAGE_REMOVE_KEY_BYTE",
		35: "STORAGE_REMOVE_RET_VALUE_BYTE",
		36: "STORAGE_HAS_KEY_BASE",
		37: "STORAGE_HAS_KEY_BYTE",
		38: "STORAGE_ITER_CREATE_PREFIX_BASE",
		39: "STORAGE_ITER_CREATE_PREFIX_BYTE",
		40: "STORAGE_ITER_CREATE_RANGE_BASE",
		41: "STORAGE_ITER_CREATE_FROM_BYTE",
		42: "STORAGE_ITER_CREATE_TO_BYTE",
		43: "STORAGE_ITER_NEXT_BASE",
		44: "STORAGE_ITER_NEXT_KEY_BYTE",
		45: "STORAGE_ITER_NEXT_VALUE_BYTE",
		46: "TOUCHING_TRIE_NODE",
		47: "READ_CACHED_TRIE_NODE",
		48: "PROMISE_AND_BASE",
		49: "PROMISE_AND_PER_PROMISE",
		50: "PROMISE_RETURN",
		51: "VALIDATOR_STAKE_BASE",
		52: "VALIDATOR_TOTAL_STAKE_BASE",
		53: "ALT_BN128_G1_MULTIEXP_BASE",
		54: "ALT_BN128_G1_MULTIEXP_ELEMENT",
		55: "ALT_BN128_PAIRING_CHECK_BASE",
		56: "ALT_BN128_PAIRING_CHECK_ELEMENT",
		57: "ALT_BN128_G1_SUM_BASE",
		58: "ALT_BN128_G1_SUM_ELEMENT",
		59: "ED25519_VERIFY_BASE",
		60: "ED25519_VERIFY_BYTE",
		61: "CONTRACT_LOADING_BASE",
		62: "CONTRACT_LOADING_BYTES",
		63: "YIELD_CREATE_BASE",
		64: "YIELD_CREATE_BYTE",
		65: "YIELD_RESUME_BASE",
		66: "YIELD_RESUME_BYTE",
		67: "BLS12381_P1_SUM_BASE",
		68: "BLS12381_P1_SUM_ELEMENT",
		69: "BLS12381_P2_SUM_BASE",
		70: "BLS12381_P2_SUM_ELEMENT",
		71: "BLS12381_G1_MULTIEXP_BASE",
		72: "BLS12381_G1_MULTIEXP_ELEMENT",
		73: "BLS12381_G2_MULTIEXP_BASE",
		74: "BLS12381_G2_MULTIEXP_ELEMENT",
		75: "BLS12381_MAP_FP_TO_G1_BASE",
		76: "BLS12381_MAP_FP_TO_G1_ELEMENT",
		77: "BLS12381_MAP_FP2_TO_G2_BASE",
		78: "BLS12381_MAP_FP2_TO_G2_ELEMENT",
		79: "BLS12381_PAIRING_BASE",
		80: "BLS12381_PAIRING_ELEMENT",
		81: "BLS12381_P1_DECOMPRESS_BASE",
		82: "BLS12381_P1_DECOMPRESS_ELEMENT",
		83: "BLS12381_P2_DECOMPRESS_BASE",
		84: "BLS12381_P2_DECOMPRESS_ELEMENT",
	}
	ExtCosts_value = map[string]int32{
		"BASE":                            0,
		"CONTRACT_COMPILE_BASE":           1,
		"CONTRACT_COMPILE_BYTES":          2,
		"READ_MEMORY_BASE":                3,
		"READ_MEMORY_BYTE":                4,
		"WRITE_MEMORY_BASE":               5,
		"WRITE_MEMORY_BYTE":               6,
		"READ_REGISTER_BASE":              7,
		"READ_REGISTER_BYTE":              8,
		"WRITE_REGISTER_BASE":             9,
		"WRITE_REGISTER_BYTE":             10,
		"UTF8_DECODING_BASE":              11,
		"UTF8_DECODING_BYTE":              12,
		"UTF16_DECODING_BASE":             13,
		"UTF16_DECODING_BYTE":             14,
		"SHA256_BASE":                     15,
		"SHA256_BYTE":                     16,
		"KECCAK256_BASE":                  17,
		"KECCAK256_BYTE":                  18,
		"KECCAK512_BASE":                  19,
		"KECCAK512_BYTE":                  20,
		"RIPEMD160_BASE":                  21,
		"RIPEMD160_BLOCK":                 22,
		"ECRECOVER_BASE":                  23,
		"LOG_BASE":                        24,
		"LOG_BYTE":                        25,
		"STORAGE_WRITE_BASE":              26,
		"STORAGE_WRITE_KEY_BYTE":          27,
		"STORAGE_WRITE_VALUE_BYTE":        28,
		"STORAGE_WRITE_EVICTED_BYTE":      29,
		"STORAGE_READ_BASE":               30,
		"STORAGE_READ_KEY_BYTE":           31,
		"STORAGE_READ_VALUE_BYTE":         32,
		"STORAGE_REMOVE_BASE":             33,
		"STORAGE_REMOVE_KEY_BYTE":         34,
		"STORAGE_REMOVE_RET_VALUE_BYTE":   35,
		"STORAGE_HAS_KEY_BASE":            36,
		"STORAGE_HAS_KEY_BYTE":            37,
		"STORAGE_ITER_CREATE_PREFIX_BASE": 38,
		"STORAGE_ITER_CREATE_PREFIX_BYTE": 39,
		"STORAGE_ITER_CREATE_RANGE_BASE":  40,
		"STORAGE_ITER_CREATE_FROM_BYTE":   41,
		"STORAGE_ITER_CREATE_TO_BYTE":     42,
		"STORAGE_ITER_NEXT_BASE":          43,
		"STORAGE_ITER_NEXT_KEY_BYTE":      44,
		"STORAGE_ITER_NEXT_VALUE_BYTE":    45,
		"TOUCHING_TRIE_NODE":              46,
		"READ_CACHED_TRIE_NODE":           47,
		"PROMISE_AND_BASE":                48,
		"PROMISE_AND_PER_PROMISE":         49,
		"PROMISE_RETURN":                  50,
		"VALIDATOR_STAKE_BASE":            51,
		"VALIDATOR_TOTAL_STAKE_BASE":      52,
		"ALT_BN128_G1_MULTIEXP_BASE":      53,
		"ALT_BN128_G1_MULTIEXP_ELEMENT":   54,
		"ALT_BN128_PAIRING_CHECK_BASE":    55,
		"ALT_BN128_PAIRING_CHECK_ELEMENT": 56,
		"ALT_BN128_G1_SUM_BASE":           57,
		"ALT_BN128_G1_SUM_ELEMENT":        58,
		"ED25519_VERIFY_BASE":             59,
		"ED25519_VERIFY_BYTE":             60,
		"CONTRACT_LOADING_BASE":           61,
		"CONTRACT_LOADING_BYTES":          62,
		"YIELD_CREATE_BASE":               63,
		"YIELD_CREATE_BYTE":               64,
		"YIELD_RESUME_BASE":               65,
		"YIELD_RESUME_BYTE":               66,
		"BLS12381_P1_SUM_BASE":            67,
		"BLS12381_P1_SUM_ELEMENT":         68,
		"BLS12381_P2_SUM_BASE":            69,
		"BLS12381_P2_SUM_ELEMENT":         70,
		"BLS12381_G1_MULTIEXP_BASE":       71,
		"BLS12381_G1_MULTIEXP_ELEMENT":    72,
		"BLS12381_G2_MULTIEXP_BASE":       73,
		"BLS12381_G2_MULTIEXP_ELEMENT":    74,
		"BLS12381_MAP_FP_TO_G1_BASE":      75,
		"BLS12381_MAP_FP_TO_G1_ELEMENT":   76,
		"BLS12381_MAP_FP2_TO_G2_BASE":     77,
		"BLS12381_MAP_FP2_TO_G2_ELEMENT":  78,
		"BLS12381_PAIRING_BASE":           79,
		"BLS12381_PAIRING_ELEMENT":        80,
		"BLS12381_P1_DECOMPRESS_BASE":     81,
		"BLS12381_P1_DECOMPRESS_ELEMENT":  82,
		"BLS12381_P2_DECOMPRESS_BASE":     83,
		"BLS12381_P2_DECOMPRESS_ELEMENT":  84,
	}
)

func (x ExtCosts) Enum() *ExtCosts {
	p := new(ExtCosts)
	*p = x
	return p
}

func (x ExtCosts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtCosts) Descriptor() protoreflect.EnumDescriptor {
	return file_payloads_near_block_transaction_execution_proto_enumTypes[3].Descriptor()
}

func (ExtCosts) Type() protoreflect.EnumType {
	return &file_payloads_near_block_transaction_execution_proto_enumTypes[3]
}

func (x ExtCosts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtCosts.Descriptor instead.
func (ExtCosts) EnumDescriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{3}
}

type ExecutionOutcomeWithOptionalReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionOutcome *ExecutionOutcomeWithIdView `protobuf:"bytes,1,opt,name=execution_outcome,json=executionOutcome,proto3" json:"execution_outcome,omitempty"`
	Receipt          *ReceiptView                `protobuf:"bytes,2,opt,name=receipt,proto3,oneof" json:"receipt,omitempty"`
}

func (x *ExecutionOutcomeWithOptionalReceipt) Reset() {
	*x = ExecutionOutcomeWithOptionalReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcomeWithOptionalReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcomeWithOptionalReceipt) ProtoMessage() {}

func (x *ExecutionOutcomeWithOptionalReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcomeWithOptionalReceipt.ProtoReflect.Descriptor instead.
func (*ExecutionOutcomeWithOptionalReceipt) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionOutcomeWithOptionalReceipt) GetExecutionOutcome() *ExecutionOutcomeWithIdView {
	if x != nil {
		return x.ExecutionOutcome
	}
	return nil
}

func (x *ExecutionOutcomeWithOptionalReceipt) GetReceipt() *ReceiptView {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type ExecutionOutcomeWithReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionOutcome *ExecutionOutcomeWithIdView `protobuf:"bytes,1,opt,name=execution_outcome,json=executionOutcome,proto3" json:"execution_outcome,omitempty"`
	Receipt          *ReceiptView                `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *ExecutionOutcomeWithReceipt) Reset() {
	*x = ExecutionOutcomeWithReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcomeWithReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcomeWithReceipt) ProtoMessage() {}

func (x *ExecutionOutcomeWithReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcomeWithReceipt.ProtoReflect.Descriptor instead.
func (*ExecutionOutcomeWithReceipt) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionOutcomeWithReceipt) GetExecutionOutcome() *ExecutionOutcomeWithIdView {
	if x != nil {
		return x.ExecutionOutcome
	}
	return nil
}

func (x *ExecutionOutcomeWithReceipt) GetReceipt() *ReceiptView {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type ExecutionOutcomeWithIdView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof         []*MerklePathItem     `protobuf:"bytes,1,rep,name=proof,proto3" json:"proof,omitempty"`
	H256BlockHash []byte                `protobuf:"bytes,2,opt,name=h256_block_hash,json=h256BlockHash,proto3" json:"h256_block_hash,omitempty"`
	H256Id        []byte                `protobuf:"bytes,3,opt,name=h256_id,json=h256Id,proto3" json:"h256_id,omitempty"`
	Outcome       *ExecutionOutcomeView `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *ExecutionOutcomeWithIdView) Reset() {
	*x = ExecutionOutcomeWithIdView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcomeWithIdView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcomeWithIdView) ProtoMessage() {}

func (x *ExecutionOutcomeWithIdView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcomeWithIdView.ProtoReflect.Descriptor instead.
func (*ExecutionOutcomeWithIdView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionOutcomeWithIdView) GetProof() []*MerklePathItem {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *ExecutionOutcomeWithIdView) GetH256BlockHash() []byte {
	if x != nil {
		return x.H256BlockHash
	}
	return nil
}

func (x *ExecutionOutcomeWithIdView) GetH256Id() []byte {
	if x != nil {
		return x.H256Id
	}
	return nil
}

func (x *ExecutionOutcomeWithIdView) GetOutcome() *ExecutionOutcomeView {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type ExecutionOutcomeView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs            []string               `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	H256ReceiptIds  [][]byte               `protobuf:"bytes,2,rep,name=h256_receipt_ids,json=h256ReceiptIds,proto3" json:"h256_receipt_ids,omitempty"`
	GasBurnt        uint64                 `protobuf:"varint,3,opt,name=gas_burnt,json=gasBurnt,proto3" json:"gas_burnt,omitempty"`
	U128TokensBurnt []byte                 `protobuf:"bytes,4,opt,name=u128_tokens_burnt,json=u128TokensBurnt,proto3" json:"u128_tokens_burnt,omitempty"`
	ExecutorId      string                 `protobuf:"bytes,5,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	Status          *ExecutionStatusView   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Metadata        *ExecutionMetadataView `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ExecutionOutcomeView) Reset() {
	*x = ExecutionOutcomeView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcomeView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcomeView) ProtoMessage() {}

func (x *ExecutionOutcomeView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcomeView.ProtoReflect.Descriptor instead.
func (*ExecutionOutcomeView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionOutcomeView) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ExecutionOutcomeView) GetH256ReceiptIds() [][]byte {
	if x != nil {
		return x.H256ReceiptIds
	}
	return nil
}

func (x *ExecutionOutcomeView) GetGasBurnt() uint64 {
	if x != nil {
		return x.GasBurnt
	}
	return 0
}

func (x *ExecutionOutcomeView) GetU128TokensBurnt() []byte {
	if x != nil {
		return x.U128TokensBurnt
	}
	return nil
}

func (x *ExecutionOutcomeView) GetExecutorId() string {
	if x != nil {
		return x.ExecutorId
	}
	return ""
}

func (x *ExecutionOutcomeView) GetStatus() *ExecutionStatusView {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExecutionOutcomeView) GetMetadata() *ExecutionMetadataView {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ExecutionStatusView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*ExecutionStatusView_Unknown_
	//	*ExecutionStatusView_Failure_
	//	*ExecutionStatusView_SuccessValue_
	//	*ExecutionStatusView_SuccessReceiptId_
	Variant isExecutionStatusView_Variant `protobuf_oneof:"variant"`
}

func (x *ExecutionStatusView) Reset() {
	*x = ExecutionStatusView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusView) ProtoMessage() {}

func (x *ExecutionStatusView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusView.ProtoReflect.Descriptor instead.
func (*ExecutionStatusView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{4}
}

func (m *ExecutionStatusView) GetVariant() isExecutionStatusView_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *ExecutionStatusView) GetUnknown() *ExecutionStatusView_Unknown {
	if x, ok := x.GetVariant().(*ExecutionStatusView_Unknown_); ok {
		return x.Unknown
	}
	return nil
}

func (x *ExecutionStatusView) GetFailure() *ExecutionStatusView_Failure {
	if x, ok := x.GetVariant().(*ExecutionStatusView_Failure_); ok {
		return x.Failure
	}
	return nil
}

func (x *ExecutionStatusView) GetSuccessValue() *ExecutionStatusView_SuccessValue {
	if x, ok := x.GetVariant().(*ExecutionStatusView_SuccessValue_); ok {
		return x.SuccessValue
	}
	return nil
}

func (x *ExecutionStatusView) GetSuccessReceiptId() *ExecutionStatusView_SuccessReceiptId {
	if x, ok := x.GetVariant().(*ExecutionStatusView_SuccessReceiptId_); ok {
		return x.SuccessReceiptId
	}
	return nil
}

type isExecutionStatusView_Variant interface {
	isExecutionStatusView_Variant()
}

type ExecutionStatusView_Unknown_ struct {
	Unknown *ExecutionStatusView_Unknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type ExecutionStatusView_Failure_ struct {
	Failure *ExecutionStatusView_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type ExecutionStatusView_SuccessValue_ struct {
	SuccessValue *ExecutionStatusView_SuccessValue `protobuf:"bytes,3,opt,name=success_value,json=successValue,proto3,oneof"`
}

type ExecutionStatusView_SuccessReceiptId_ struct {
	SuccessReceiptId *ExecutionStatusView_SuccessReceiptId `protobuf:"bytes,4,opt,name=success_receipt_id,json=successReceiptId,proto3,oneof"`
}

func (*ExecutionStatusView_Unknown_) isExecutionStatusView_Variant() {}

func (*ExecutionStatusView_Failure_) isExecutionStatusView_Variant() {}

func (*ExecutionStatusView_SuccessValue_) isExecutionStatusView_Variant() {}

func (*ExecutionStatusView_SuccessReceiptId_) isExecutionStatusView_Variant() {}

type ExecutionMetadataView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    uint32                                     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	GasProfile *ExecutionMetadataView_RepeatedCostGasUsed `protobuf:"bytes,2,opt,name=gas_profile,json=gasProfile,proto3,oneof" json:"gas_profile,omitempty"`
}

func (x *ExecutionMetadataView) Reset() {
	*x = ExecutionMetadataView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionMetadataView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionMetadataView) ProtoMessage() {}

func (x *ExecutionMetadataView) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionMetadataView.ProtoReflect.Descriptor instead.
func (*ExecutionMetadataView) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutionMetadataView) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ExecutionMetadataView) GetGasProfile() *ExecutionMetadataView_RepeatedCostGasUsed {
	if x != nil {
		return x.GasProfile
	}
	return nil
}

type MerklePathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H256Hash  []byte    `protobuf:"bytes,1,opt,name=h256_hash,json=h256Hash,proto3" json:"h256_hash,omitempty"`
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=borealis.payloads.near.Direction" json:"direction,omitempty"`
}

func (x *MerklePathItem) Reset() {
	*x = MerklePathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathItem) ProtoMessage() {}

func (x *MerklePathItem) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathItem.ProtoReflect.Descriptor instead.
func (*MerklePathItem) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{6}
}

func (x *MerklePathItem) GetH256Hash() []byte {
	if x != nil {
		return x.H256Hash
	}
	return nil
}

func (x *MerklePathItem) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_LEFT
}

type CostGasUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostCategory CostCategory `protobuf:"varint,1,opt,name=cost_category,json=costCategory,proto3,enum=borealis.payloads.near.CostCategory" json:"cost_category,omitempty"`
	Cost         *Cost        `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	GasUsed      uint64       `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *CostGasUsed) Reset() {
	*x = CostGasUsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostGasUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGasUsed) ProtoMessage() {}

func (x *CostGasUsed) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGasUsed.ProtoReflect.Descriptor instead.
func (*CostGasUsed) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{7}
}

func (x *CostGasUsed) GetCostCategory() CostCategory {
	if x != nil {
		return x.CostCategory
	}
	return CostCategory_ACTION_COST
}

func (x *CostGasUsed) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *CostGasUsed) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Cost_ActionCost_
	//	*Cost_ExtCost_
	//	*Cost_WasmInstruction_
	Variant isCost_Variant `protobuf_oneof:"variant"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{8}
}

func (m *Cost) GetVariant() isCost_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Cost) GetActionCost() *Cost_ActionCost {
	if x, ok := x.GetVariant().(*Cost_ActionCost_); ok {
		return x.ActionCost
	}
	return nil
}

func (x *Cost) GetExtCost() *Cost_ExtCost {
	if x, ok := x.GetVariant().(*Cost_ExtCost_); ok {
		return x.ExtCost
	}
	return nil
}

func (x *Cost) GetWasmInstruction() *Cost_WasmInstruction {
	if x, ok := x.GetVariant().(*Cost_WasmInstruction_); ok {
		return x.WasmInstruction
	}
	return nil
}

type isCost_Variant interface {
	isCost_Variant()
}

type Cost_ActionCost_ struct {
	ActionCost *Cost_ActionCost `protobuf:"bytes,1,opt,name=action_cost,json=actionCost,proto3,oneof"`
}

type Cost_ExtCost_ struct {
	ExtCost *Cost_ExtCost `protobuf:"bytes,2,opt,name=ext_cost,json=extCost,proto3,oneof"`
}

type Cost_WasmInstruction_ struct {
	WasmInstruction *Cost_WasmInstruction `protobuf:"bytes,3,opt,name=wasm_instruction,json=wasmInstruction,proto3,oneof"`
}

func (*Cost_ActionCost_) isCost_Variant() {}

func (*Cost_ExtCost_) isCost_Variant() {}

func (*Cost_WasmInstruction_) isCost_Variant() {}

type ExecutionStatusView_Unknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionStatusView_Unknown) Reset() {
	*x = ExecutionStatusView_Unknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusView_Unknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusView_Unknown) ProtoMessage() {}

func (x *ExecutionStatusView_Unknown) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusView_Unknown.ProtoReflect.Descriptor instead.
func (*ExecutionStatusView_Unknown) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{4, 0}
}

type ExecutionStatusView_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *errors.TxExecutionError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ExecutionStatusView_Failure) Reset() {
	*x = ExecutionStatusView_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusView_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusView_Failure) ProtoMessage() {}

func (x *ExecutionStatusView_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusView_Failure.ProtoReflect.Descriptor instead.
func (*ExecutionStatusView_Failure) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ExecutionStatusView_Failure) GetError() *errors.TxExecutionError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ExecutionStatusView_SuccessValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExecutionStatusView_SuccessValue) Reset() {
	*x = ExecutionStatusView_SuccessValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusView_SuccessValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusView_SuccessValue) ProtoMessage() {}

func (x *ExecutionStatusView_SuccessValue) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusView_SuccessValue.ProtoReflect.Descriptor instead.
func (*ExecutionStatusView_SuccessValue) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{4, 2}
}

func (x *ExecutionStatusView_SuccessValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExecutionStatusView_SuccessReceiptId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H256ReceiptHash []byte `protobuf:"bytes,1,opt,name=h256_receipt_hash,json=h256ReceiptHash,proto3" json:"h256_receipt_hash,omitempty"`
}

func (x *ExecutionStatusView_SuccessReceiptId) Reset() {
	*x = ExecutionStatusView_SuccessReceiptId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusView_SuccessReceiptId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusView_SuccessReceiptId) ProtoMessage() {}

func (x *ExecutionStatusView_SuccessReceiptId) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusView_SuccessReceiptId.ProtoReflect.Descriptor instead.
func (*ExecutionStatusView_SuccessReceiptId) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{4, 3}
}

func (x *ExecutionStatusView_SuccessReceiptId) GetH256ReceiptHash() []byte {
	if x != nil {
		return x.H256ReceiptHash
	}
	return nil
}

type ExecutionMetadataView_RepeatedCostGasUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasProfile []*CostGasUsed `protobuf:"bytes,2,rep,name=gas_profile,json=gasProfile,proto3" json:"gas_profile,omitempty"`
}

func (x *ExecutionMetadataView_RepeatedCostGasUsed) Reset() {
	*x = ExecutionMetadataView_RepeatedCostGasUsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionMetadataView_RepeatedCostGasUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionMetadataView_RepeatedCostGasUsed) ProtoMessage() {}

func (x *ExecutionMetadataView_RepeatedCostGasUsed) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionMetadataView_RepeatedCostGasUsed.ProtoReflect.Descriptor instead.
func (*ExecutionMetadataView_RepeatedCostGasUsed) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ExecutionMetadataView_RepeatedCostGasUsed) GetGasProfile() []*CostGasUsed {
	if x != nil {
		return x.GasProfile
	}
	return nil
}

type Cost_ActionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ActionCosts `protobuf:"varint,1,opt,name=value,proto3,enum=borealis.payloads.near.ActionCosts" json:"value,omitempty"`
}

func (x *Cost_ActionCost) Reset() {
	*x = Cost_ActionCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost_ActionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost_ActionCost) ProtoMessage() {}

func (x *Cost_ActionCost) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost_ActionCost.ProtoReflect.Descriptor instead.
func (*Cost_ActionCost) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Cost_ActionCost) GetValue() ActionCosts {
	if x != nil {
		return x.Value
	}
	return ActionCosts_CREATE_ACCOUNT
}

type Cost_ExtCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ExtCosts `protobuf:"varint,1,opt,name=value,proto3,enum=borealis.payloads.near.ExtCosts" json:"value,omitempty"`
}

func (x *Cost_ExtCost) Reset() {
	*x = Cost_ExtCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost_ExtCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost_ExtCost) ProtoMessage() {}

func (x *Cost_ExtCost) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost_ExtCost.ProtoReflect.Descriptor instead.
func (*Cost_ExtCost) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Cost_ExtCost) GetValue() ExtCosts {
	if x != nil {
		return x.Value
	}
	return ExtCosts_BASE
}

type Cost_WasmInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Cost_WasmInstruction) Reset() {
	*x = Cost_WasmInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost_WasmInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost_WasmInstruction) ProtoMessage() {}

func (x *Cost_WasmInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_payloads_near_block_transaction_execution_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost_WasmInstruction.ProtoReflect.Descriptor instead.
func (*Cost_WasmInstruction) Descriptor() ([]byte, []int) {
	return file_payloads_near_block_transaction_execution_proto_rawDescGZIP(), []int{8, 2}
}

var File_payloads_near_block_transaction_execution_proto protoreflect.FileDescriptor

var file_payloads_near_block_transaction_execution_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x1a, 0x36, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd6, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x69, 0x65, 0x77, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x1a, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x68, 0x32, 0x35, 0x36, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x32, 0x35, 0x36, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x68, 0x32, 0x35, 0x36, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x32, 0x35, 0x36, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x68, 0x32, 0x35, 0x36, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x62, 0x75,
	0x72, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x42, 0x75,
	0x72, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x31, 0x32, 0x38, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x75, 0x31, 0x32, 0x38, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xcd, 0x04, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x1a, 0x49, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x54, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a,
	0x24, 0x0a, 0x0c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x32, 0x35,
	0x36, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x32, 0x35, 0x36, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x22, 0x87, 0x02, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x67, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x5b, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x52, 0x0a,
	0x67, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x0e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x68, 0x32, 0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x77, 0x61,
	0x73, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x61, 0x73, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x41,
	0x0a, 0x07, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x11, 0x0a, 0x0f, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2a,
	0x20, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x2a, 0x33, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x53, 0x4d, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x2a, 0xcf, 0x03, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x08, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x44, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x44, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x50, 0x54, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x12, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x14, 0x2a, 0x89, 0x12, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x49, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54, 0x46, 0x38, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54,
	0x46, 0x38, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x54, 0x46, 0x31, 0x36, 0x5f, 0x44, 0x45, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x54, 0x46, 0x31, 0x36, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b,
	0x32, 0x35, 0x36, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45,
	0x43, 0x43, 0x41, 0x4b, 0x32, 0x35, 0x36, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x12, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b, 0x35, 0x31, 0x32, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x43, 0x43, 0x41, 0x4b, 0x35, 0x31, 0x32, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x49, 0x50, 0x45, 0x4d, 0x44,
	0x31, 0x36, 0x30, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49,
	0x50, 0x45, 0x4d, 0x44, 0x31, 0x36, 0x30, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x16, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x43, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x18, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x19, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10,
	0x1c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10,
	0x1d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x20,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x25, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x26, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x27, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x28, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x29, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x2a, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x2c, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x2d, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x49, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x2e, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x2f,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53,
	0x45, 0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x32, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x34, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x54, 0x5f, 0x42, 0x4e, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x31, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x35, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4c, 0x54, 0x5f, 0x42, 0x4e, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x31, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x36, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4c, 0x54, 0x5f, 0x42, 0x4e, 0x31, 0x32,
	0x38, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x37, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x54, 0x5f, 0x42, 0x4e,
	0x31, 0x32, 0x38, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x4c, 0x54, 0x5f, 0x42, 0x4e, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x31, 0x5f, 0x53, 0x55, 0x4d, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x39, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x54, 0x5f, 0x42, 0x4e,
	0x31, 0x32, 0x38, 0x5f, 0x47, 0x31, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x3a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x3b, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x3d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x3e, 0x12, 0x15, 0x0a,
	0x11, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x3f, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x11, 0x59,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x41, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4d, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x42, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x53,
	0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x31, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x43, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f,
	0x50, 0x31, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x44,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x32, 0x5f,
	0x53, 0x55, 0x4d, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c,
	0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x32, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x46, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c, 0x53, 0x31, 0x32,
	0x33, 0x38, 0x31, 0x5f, 0x47, 0x31, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x47, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33,
	0x38, 0x31, 0x5f, 0x47, 0x31, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x48, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c, 0x53, 0x31,
	0x32, 0x33, 0x38, 0x31, 0x5f, 0x47, 0x32, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x49, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c, 0x53, 0x31, 0x32,
	0x33, 0x38, 0x31, 0x5f, 0x47, 0x32, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x4a, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x53,
	0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x50, 0x5f, 0x54, 0x4f, 0x5f,
	0x47, 0x31, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x4b, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4c, 0x53,
	0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x50, 0x5f, 0x54, 0x4f, 0x5f,
	0x47, 0x31, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x4c, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x50, 0x32,
	0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x32, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x4d, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x50,
	0x32, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x32, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x4e, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x41,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x4f, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x50, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4c,
	0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x31, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x51, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x31, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x52, 0x12,
	0x1f, 0x0a, 0x1b, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x32, 0x5f, 0x44,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x53,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x53, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x50, 0x32, 0x5f,
	0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x54, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payloads_near_block_transaction_execution_proto_rawDescOnce sync.Once
	file_payloads_near_block_transaction_execution_proto_rawDescData = file_payloads_near_block_transaction_execution_proto_rawDesc
)

func file_payloads_near_block_transaction_execution_proto_rawDescGZIP() []byte {
	file_payloads_near_block_transaction_execution_proto_rawDescOnce.Do(func() {
		file_payloads_near_block_transaction_execution_proto_rawDescData = protoimpl.X.CompressGZIP(file_payloads_near_block_transaction_execution_proto_rawDescData)
	})
	return file_payloads_near_block_transaction_execution_proto_rawDescData
}

var file_payloads_near_block_transaction_execution_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_payloads_near_block_transaction_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_payloads_near_block_transaction_execution_proto_goTypes = []any{
	(Direction)(0),    // 0: borealis.payloads.near.Direction
	(CostCategory)(0), // 1: borealis.payloads.near.CostCategory
	(ActionCosts)(0),  // 2: borealis.payloads.near.ActionCosts
	(ExtCosts)(0),     // 3: borealis.payloads.near.ExtCosts
	(*ExecutionOutcomeWithOptionalReceipt)(nil),       // 4: borealis.payloads.near.ExecutionOutcomeWithOptionalReceipt
	(*ExecutionOutcomeWithReceipt)(nil),               // 5: borealis.payloads.near.ExecutionOutcomeWithReceipt
	(*ExecutionOutcomeWithIdView)(nil),                // 6: borealis.payloads.near.ExecutionOutcomeWithIdView
	(*ExecutionOutcomeView)(nil),                      // 7: borealis.payloads.near.ExecutionOutcomeView
	(*ExecutionStatusView)(nil),                       // 8: borealis.payloads.near.ExecutionStatusView
	(*ExecutionMetadataView)(nil),                     // 9: borealis.payloads.near.ExecutionMetadataView
	(*MerklePathItem)(nil),                            // 10: borealis.payloads.near.MerklePathItem
	(*CostGasUsed)(nil),                               // 11: borealis.payloads.near.CostGasUsed
	(*Cost)(nil),                                      // 12: borealis.payloads.near.Cost
	(*ExecutionStatusView_Unknown)(nil),               // 13: borealis.payloads.near.ExecutionStatusView.Unknown
	(*ExecutionStatusView_Failure)(nil),               // 14: borealis.payloads.near.ExecutionStatusView.Failure
	(*ExecutionStatusView_SuccessValue)(nil),          // 15: borealis.payloads.near.ExecutionStatusView.SuccessValue
	(*ExecutionStatusView_SuccessReceiptId)(nil),      // 16: borealis.payloads.near.ExecutionStatusView.SuccessReceiptId
	(*ExecutionMetadataView_RepeatedCostGasUsed)(nil), // 17: borealis.payloads.near.ExecutionMetadataView.RepeatedCostGasUsed
	(*Cost_ActionCost)(nil),                           // 18: borealis.payloads.near.Cost.ActionCost
	(*Cost_ExtCost)(nil),                              // 19: borealis.payloads.near.Cost.ExtCost
	(*Cost_WasmInstruction)(nil),                      // 20: borealis.payloads.near.Cost.WasmInstruction
	(*ReceiptView)(nil),                               // 21: borealis.payloads.near.ReceiptView
	(*errors.TxExecutionError)(nil),                   // 22: borealis.payloads.near.TxExecutionError
}
var file_payloads_near_block_transaction_execution_proto_depIdxs = []int32{
	6,  // 0: borealis.payloads.near.ExecutionOutcomeWithOptionalReceipt.execution_outcome:type_name -> borealis.payloads.near.ExecutionOutcomeWithIdView
	21, // 1: borealis.payloads.near.ExecutionOutcomeWithOptionalReceipt.receipt:type_name -> borealis.payloads.near.ReceiptView
	6,  // 2: borealis.payloads.near.ExecutionOutcomeWithReceipt.execution_outcome:type_name -> borealis.payloads.near.ExecutionOutcomeWithIdView
	21, // 3: borealis.payloads.near.ExecutionOutcomeWithReceipt.receipt:type_name -> borealis.payloads.near.ReceiptView
	10, // 4: borealis.payloads.near.ExecutionOutcomeWithIdView.proof:type_name -> borealis.payloads.near.MerklePathItem
	7,  // 5: borealis.payloads.near.ExecutionOutcomeWithIdView.outcome:type_name -> borealis.payloads.near.ExecutionOutcomeView
	8,  // 6: borealis.payloads.near.ExecutionOutcomeView.status:type_name -> borealis.payloads.near.ExecutionStatusView
	9,  // 7: borealis.payloads.near.ExecutionOutcomeView.metadata:type_name -> borealis.payloads.near.ExecutionMetadataView
	13, // 8: borealis.payloads.near.ExecutionStatusView.unknown:type_name -> borealis.payloads.near.ExecutionStatusView.Unknown
	14, // 9: borealis.payloads.near.ExecutionStatusView.failure:type_name -> borealis.payloads.near.ExecutionStatusView.Failure
	15, // 10: borealis.payloads.near.ExecutionStatusView.success_value:type_name -> borealis.payloads.near.ExecutionStatusView.SuccessValue
	16, // 11: borealis.payloads.near.ExecutionStatusView.success_receipt_id:type_name -> borealis.payloads.near.ExecutionStatusView.SuccessReceiptId
	17, // 12: borealis.payloads.near.ExecutionMetadataView.gas_profile:type_name -> borealis.payloads.near.ExecutionMetadataView.RepeatedCostGasUsed
	0,  // 13: borealis.payloads.near.MerklePathItem.direction:type_name -> borealis.payloads.near.Direction
	1,  // 14: borealis.payloads.near.CostGasUsed.cost_category:type_name -> borealis.payloads.near.CostCategory
	12, // 15: borealis.payloads.near.CostGasUsed.cost:type_name -> borealis.payloads.near.Cost
	18, // 16: borealis.payloads.near.Cost.action_cost:type_name -> borealis.payloads.near.Cost.ActionCost
	19, // 17: borealis.payloads.near.Cost.ext_cost:type_name -> borealis.payloads.near.Cost.ExtCost
	20, // 18: borealis.payloads.near.Cost.wasm_instruction:type_name -> borealis.payloads.near.Cost.WasmInstruction
	22, // 19: borealis.payloads.near.ExecutionStatusView.Failure.error:type_name -> borealis.payloads.near.TxExecutionError
	11, // 20: borealis.payloads.near.ExecutionMetadataView.RepeatedCostGasUsed.gas_profile:type_name -> borealis.payloads.near.CostGasUsed
	2,  // 21: borealis.payloads.near.Cost.ActionCost.value:type_name -> borealis.payloads.near.ActionCosts
	3,  // 22: borealis.payloads.near.Cost.ExtCost.value:type_name -> borealis.payloads.near.ExtCosts
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_payloads_near_block_transaction_execution_proto_init() }
func file_payloads_near_block_transaction_execution_proto_init() {
	if File_payloads_near_block_transaction_execution_proto != nil {
		return
	}
	file_payloads_near_block_transaction_receipt_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payloads_near_block_transaction_execution_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionOutcomeWithOptionalReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionOutcomeWithReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionOutcomeWithIdView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionOutcomeView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionMetadataView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MerklePathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CostGasUsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusView_Unknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusView_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusView_SuccessValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusView_SuccessReceiptId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionMetadataView_RepeatedCostGasUsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Cost_ActionCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Cost_ExtCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payloads_near_block_transaction_execution_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Cost_WasmInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payloads_near_block_transaction_execution_proto_msgTypes[0].OneofWrappers = []any{}
	file_payloads_near_block_transaction_execution_proto_msgTypes[4].OneofWrappers = []any{
		(*ExecutionStatusView_Unknown_)(nil),
		(*ExecutionStatusView_Failure_)(nil),
		(*ExecutionStatusView_SuccessValue_)(nil),
		(*ExecutionStatusView_SuccessReceiptId_)(nil),
	}
	file_payloads_near_block_transaction_execution_proto_msgTypes[5].OneofWrappers = []any{}
	file_payloads_near_block_transaction_execution_proto_msgTypes[8].OneofWrappers = []any{
		(*Cost_ActionCost_)(nil),
		(*Cost_ExtCost_)(nil),
		(*Cost_WasmInstruction_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payloads_near_block_transaction_execution_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payloads_near_block_transaction_execution_proto_goTypes,
		DependencyIndexes: file_payloads_near_block_transaction_execution_proto_depIdxs,
		EnumInfos:         file_payloads_near_block_transaction_execution_proto_enumTypes,
		MessageInfos:      file_payloads_near_block_transaction_execution_proto_msgTypes,
	}.Build()
	File_payloads_near_block_transaction_execution_proto = out.File
	file_payloads_near_block_transaction_execution_proto_rawDesc = nil
	file_payloads_near_block_transaction_execution_proto_goTypes = nil
	file_payloads_near_block_transaction_execution_proto_depIdxs = nil
}
